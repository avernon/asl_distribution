###############################################################################
## Copyright (c) 2014 AllSeen Alliance. All rights reserved.
##
## Contributed by Qualcomm Connected Experiences, Inc.,
## with authorization from the AllSeen Alliance, Inc.
## 
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
## 
##     http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## 
## Pursuant to Section 1 of the License, the work of authorship constituting
## a Work and any Contribution incorporated in the Work shall mean only that
## Contributor's code submissions authored by that Contributor.  Any rights
## granted under the License are conditioned upon acceptance of these
## clarifications.
###############################################################################
#import GenAndroid
#import CommonCheetah as cc
#from .. import common
/* Source: "$command_line.absolute_path_xml_input_file" */

package $interface.get_path();

#if $interface.dictionaries
import java.util.HashMap;
#end if
#if $service.has_dictionaries and $command_line.runnable
import java.util.Set;
#end if
import org.alljoyn.bus.BusObject;
#if $interface.signals
import org.alljoyn.bus.annotation.BusSignalHandler;
#end if

import android.os.Handler;

/* The AllJoyn service implementation of $interface.interface_full_name. */
public class ${interface.interface_name}Impl implements $interface.interface_name, BusObject {
    private Handler mHandler;   /* Means by which to send message to the user interface. */
    private int mMessageId;     /* Identifier to be used for this interface instance in UI messages. */

    /*
     * Constructor for the ${interface.interface_name}Impl class.
     * h is used to send messages sent back to the user interface.
     * messageId, is the identifier to use for sending message from this interface instance.
     */
    public ${interface.interface_name}Impl(Handler h, int messageId)
    {
        mHandler = h;
        mMessageId = messageId;
        sendUiMessage("Created an instance of ${interface.interface_name}Imp.");
    }

    #for $m in $interface.methods
        #set $return_type = $GenAndroid.get_java_return_type(m)
    /*
     * Intentionally empty implementation of the method since the true
     * implementation is on the server side.
     */
    public $return_type $common.make_camel_case($m.name, None)($m.input_arg_info.arg_declaration) {
        #if $return_type != "void"
            #set $arg = $GenAndroid.get_return_arg($m)
        $return_type returnValue$GenAndroid.get_initialization($arg, $m);

        return returnValue;
        #end if
    }

    #end for
    #for $p in $interface.properties
        #if $p.is_writeable()
    /*
     * Intentionally empty implementation of the property since the true
     * implementation is on the server side.
     */
    public void set${p.name}($p.input_arg_info.arg_declaration) {
    }

        #end if
        #if $p.is_readable()
            #set $return_type = $GenAndroid.get_java_return_type($p)
    /*
     * Intentionally empty implementation of the property since the true
     * implementation is on the server side.
     */
    public $return_type get${p.name}() {
        $return_type returnValue$GenAndroid.get_initialization(p.args[0], $p);

        return returnValue;
    }

        #end if
    #end for
    #for $s in $interface.signals
    /*
     * This receives the signal from the emitter at the service.
     */
    @BusSignalHandler(iface = "$interface.interface_full_name", signal = "$s.name")
    public void $common.make_camel_case($s.name, None)($s.output_arg_info.arg_declaration) {
        sendUiMessage("Signal $interface.interface_full_name::${s.name}() received.");
$cc.CommonCheetah.print_args($s.args, 8)#slurp
    }

    #end for
    /* Helper function to send a message to the UI thread. */
    private void sendUiMessage(String message) {
        mHandler.sendMessage(mHandler.obtainMessage(mMessageId, message));
    }
}
