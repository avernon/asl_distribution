###############################################################################
## Copyright (c) 2013-2014 AllSeen Alliance. All rights reserved.
##
## Contributed by Qualcomm Connected Experiences, Inc.,
## with authorization from the AllSeen Alliance, Inc.
## 
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
## 
##     http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## 
## Pursuant to Section 1 of the License, the work of authorship constituting
## a Work and any Contribution incorporated in the Work shall mean only that
## Contributor's code submissions authored by that Contributor.  Any rights
## granted under the License are conditioned upon acceptance of these
## clarifications.
###############################################################################
#import GenAndroid
#from .. import argdef
#from .. import signaldef
#from .. import structdef
#from .. import interface as iface
#####################
## Declare a specific instance of a class for one interface.
## This is a container for the argument(s) for runnable code.
## $object is the AllJoynObject which may need the persistent data.
## $interface is the Interface implemented in this AllJoynObject.
## $is_client is True if the declaration for the client side and False if for the server side.
## $indent_count is the number of spaces to indent the code.
#####################
#@staticmethod
#def declare_interface_persistent_data($object, $interface, $is_client, $indent_count)
    #for $m in $interface.methods
$CommonCheetah.declare_instance_of_persistent_class($object, $interface, $m, $is_client, $indent_count)#slurp
    #end for
    #for $p in $interface.properties
$CommonCheetah.declare_instance_of_persistent_class($object, $interface, $p, $is_client, $indent_count)#slurp
    #end for
    #for $s in $interface.signals
$CommonCheetah.declare_instance_of_persistent_class($object, $interface, $s, $is_client, $indent_count)#slurp
    #end for
#end def
#####################
## Declare a specific instance of a class for one component object.
## This is a container for the argument(s) for runnable code.
## $object is the AllJoynObject which may need the persistent data.
## $interface is the Interface implemented in this AllJoynObject.
## $is_client is True if the declaration for the client side and False if for the server side.
## $indent_count is the number of spaces to indent the code.
#####################
#@staticmethod
#def declare_instance_of_persistent_class($object, $interface, $comp, $is_client, $indent_count)
## Signal classes need to be accessible from ServiceMain.
    #if not $is_client and isinstance($comp, signaldef.SignalDef)
        #set $visibility = "public"
    #else
        #set $visibility = "private"
    #end if
    #set $has_inputs = $comp.input_arg_info and len($comp.input_arg_info.args) > 0
    #set $has_outputs = $comp.output_arg_info and len($comp.output_arg_info.args) > 0
    #if ($is_client and $has_inputs) or (not $is_client and $has_outputs)
        #set $indent = $indent_count * " "
        #set $comment_name = $CommonCheetah.make_component_comment_name($object, $interface, $comp)
$indent/* Instance data for '$comment_name'. */
        #set $class_name = $CommonCheetah.make_persistent_class_name($interface, $comp)
        #set $instance_name = $CommonCheetah.make_persistent_instance_name($object, $interface, $comp)
${indent}$visibility $class_name $instance_name =
${indent}        new ${class_name}();
    #end if
#end def
#####################
## Declare a specific instance of a class for one interface.
## This is a container for the argument(s) for runnable code.
## $interface is the Interface being implemented.
## $is_client is True if the declaration for the client side and False if for the server side.
## $indent_count is the number of spaces to indent the code.
#####################
#@staticmethod
#def define_interface_persistent_classes($interface, $is_client, $indent_count)
    #set $indent = $indent_count * " "
    #if $GenAndroid.interface_needs_persistent_data($interface, $is_client)
$indent/* Persistent data class definitions for $interface.interface_full_name. */
        #for $m in $interface.methods
$CommonCheetah.define_persistent_class($interface, $m, $is_client, $indent_count)
        #end for
        #for $p in $interface.properties
$CommonCheetah.define_persistent_class($interface, $p, $is_client, $indent_count)
        #end for
        #if not $is_client
            #for $s in $interface.signals
$CommonCheetah.define_persistent_class($interface, $s, $is_client, $indent_count)
            #end for
        #end if
    #end if
#end def
#####################
## Define a class to contain the arguments for this component. Direction can be
##  'in' or 'out'. 'comp' can be a method, signal, or property.
## $interface is the Interface being implemented.
## $comp is the AllJoyn component such as a method, property, or signal.
## $is_client is True if the declaration for the client side and False if for the server side.
## $indent_count is the number of spaces to indent the code.
#####################
#@staticmethod
#def define_persistent_class($interface, $comp, $is_client, $indent_count)
    #set $indent = $indent_count * " "
    #if $is_client
        #set $args = $comp.input_arg_info.args
    #else
        #set $args = $comp.output_arg_info.args
    #end if
    #if $args
## Signal classes need to be accessible from ServiceMain.
        #if isinstance($comp, signaldef.SignalDef)
            #set $visibility = "public"
        #else
            #set $visibility = "private"
        #end if
        #set $class_name = $CommonCheetah.make_persistent_class_name($interface, $comp)
${indent}$visibility class $class_name {
        #for $a in $args
            #if $a.is_array() and not $a.is_dictionary()
                #set $array_brackets = "[]"
            #else
                #set $array_brackets = ""
            #end if
            #set $t = $GenAndroid.get_base_java_type($a.interface, $a.arg_type, $comp)
            #set $init = $GenAndroid.get_initialization($a, $comp)
## A persistent string needs a private int, HelloNumber_$a.name, to initialize it.
            #if $t == "String" and not $a.is_array()
${indent}    $visibility int HelloNumber_$a.name = 0;
            #end if
${indent}    $visibility $t$array_brackets $a.name$init;
        #end for

${indent}    $visibility ${class_name}() {
        #set $add_newline = False
        #for $a in $args
            #if $a.is_dictionary()
                #if $add_newline

                #end if
                #for $entry in range(5)
                ${a.name}.put($GenAndroid.make_random_dictionary_init($a));
                #end for
                #set $add_newline = True
            #end if
        #end for
${indent}    }

${indent}    $visibility void incrementArgs() {
$CommonCheetah.increment_args(None, None, $comp, $args, $indent_count + 8)#slurp
${indent}    }
${indent}}
    #end if
#end def
#####################
## Make a collision free class name for this interface component.
## 'comp' can be a method, signal, or property.
#####################
#@staticmethod
#def make_persistent_class_name($interface, $comp)
    #return "{0}_{1}_Args".format($interface.get_full_coded_name(), $comp.name)
#end def
#####################
## Make a collision free instance name from these component.
## 'comp' can be a method, signal, or property.
#####################
#@staticmethod
#def make_persistent_instance_name($object, $interface, $comp)
    #set $class_name = $CommonCheetah.make_persistent_class_name($interface, $comp)
    #if $object
        #return "m{0}_{1}".format($object.get_full_coded_name(True), $class_name)
    #else
        #return "m{0}".format($class_name)
    #end if
#end def
#####################
## "Increment" all these arguments for the "runnable" version of the program.
#####################
#@staticmethod
#def increment_args($object, $interface, $comp, $args, $indent_count)
    #set $arg_num = 0
    #for $a in $args
$CommonCheetah.increment_arg($object, $interface, $comp, $a, $arg_num, $indent_count)#slurp
        #set $arg_num = $arg_num + 1
        #if $arg_num < len($args)

        #end if
    #end for
#end def
#####################
## "Increment" this argument for the "runnable" version of the program.
#####################
#@staticmethod
#def increment_arg($object, $interface, $comp, $arg, $arg_num, $indent_count)
## Dictionaries are also considered arrays so be careful here.
    #set $indent = $indent_count * ' '
    #if ($arg.is_array() and not $arg.is_dictionary()) or $arg.is_dictionary_array()
        #set $element0 = "[0]"
    #else
        #set $element0 = ""
    #end if
    #if $interface
        #set $instance_name = $CommonCheetah.make_persistent_instance_name($object, $interface, $comp) + '.'
    #else
        #set $instance_name = ""
    #end if
    #set $arg_name = "{0}{1}".format($instance_name, $arg.name)
    #if $arg.is_structure()
${indent}${instance_name}${arg.name}${element0}.Increment();
    #else
        #set $sig = $arg.get_base_signature()
        #if $sig == 'd'
${indent}$arg_name$element0 += 0.1;
        #elif $sig == 'v'
${indent}${arg_name}_int$element0++;
        #elif $sig == 'b'
${indent}$arg_name$element0 = !${arg_name}$element0;
## Arrays of strings are handled differently.
        #elif $sig in ('s', 'o', 'g')
            #if $arg.is_array
${indent}for (int i = 0; i < ${arg_name}.length - 1; i++) {
${indent}   String temp = ${arg_name}[i];

${indent}   ${arg_name}[i] = ${arg_name}[i + 1];
${indent}   ${arg_name}[i + 1] = temp;
${indent}}
            #else
                #set $comment_name = $CommonCheetah.make_component_comment_name($object, $interface, $comp)
                #if $sig == 'o'
${indent}$arg_name = String.format("/object/path/test%d", ++${instance_name}HelloNumber_$arg.name);
                #elif $sig == 'g'
${indent}$arg_name = String.format("(sig%c)", 's' + (++${instance_name}HelloNumber_$arg.name % 3));
                #else
${indent}$arg_name = String.format("Hello # %d from '$comment_name' arg '$arg.name'.", ++${instance_name}HelloNumber_$arg.name);
                #end if
            #end if
        #else
            #if $arg.is_dictionary
                #set $kv_types = $GenAndroid.make_dictionary_types($arg.interface, $arg.get_named_type())
                #set $l = "Set<{0}> s{1} = {2}.keySet();".format($kv_types[0], $arg_num, $arg_name)
${indent}$l
                #set $l = "{0} k{1} = s{1}.iterator().next();".format($kv_types[0], $arg_num)
${indent}$l
                #set $l = "{0} v{1} = {2}.get(k{1});".format($kv_types[1], $arg_num, $arg_name)
${indent}$l

                #if $kv_types[1] in $GenAndroid.type_primative_to_object_dictionary.values()
                    #if $kv_types[1] == "String"
${indent}if (Character.isLowerCase(v${arg_num}.charAt(0))) {
${indent}    v${arg_num}.toUpperCase();
${indent}} else {
${indent}    v${arg_num}.toLowerCase();
${indent}}
                    #elif $kv_types[1] == "Boolean"
${indent}v$arg_num = !v$arg_num;
                    #else
${indent}v$arg_num++;
                    #end if
                #else
${indent}/* TODO: Make a change in 'v$arg_num' before putting it back in the dictionary. */
                #end if
                #set $l = "{0}.put(k{1}, v{1});".format($arg_name, $arg_num)
${indent}$l
            #elif $sig not in ('s', 'o', 'g')
${indent}${arg_name}$element0++;
            #end if
        #end if
    #end if
#end def
#####################
## Add the arguments, without types, to a method call, signal, or property.
#####################
#@staticmethod
#def add_args($object, $interface, $comp, $direction = "in")
    #set $comma_space = ""
    #set $instance_name = $CommonCheetah.make_persistent_instance_name($object, $interface, $comp)
    #for $a in $comp.args
        #if $a.direction == $direction
            #set $arg_name = "{0}.{1}".format($instance_name, $a.name)
${comma_space}$arg_name#slurp
            #set $comma_space = ", "
        #end if
    #end for
#end def
#####################
## Make the name for the persistent data to be used for this argument.
## It is a combination of the the component (method/property/signal).
#####################
#@staticmethod
#def make_persistent_arg_name($arg, $comp)
    #set $return_value = "m{0}_{1}".format($comp.name, $arg.name)
    #return $return_value
#end def
#####################
## Make a user friendly name to identify a specific instance of a component
## (method, signal, or property).
#####################
#@staticmethod
#def make_component_comment_name($object, $interface, $component)
    #if $object
        #return "{0}/{1}::{2}()".format($object.get_full_name(), $interface.interface_full_name, $component.name)
    #elif $interface
        #return "{0}::{1}()".format($interface.interface_full_name, $component.name)
    #else
        #return "{0}()".format($component.name)
    #end if
#end def
#####################
## Print the values received from the various arguments.
#####################
#@staticmethod
#def print_args($args, $indent_count)
    #set $indent = $indent_count * " "
    #if $args

${indent}String ajcgMessageString;
        #set $dict_arg_num = 0
        #for $a in $args

$CommonCheetah.format_arg($a, $a.name, $dict_arg_num, $indent_count)
            #if $a.is_dictionary()
                #set $dict_arg_num = $dict_arg_num + 1
            #end if
${indent}sendUiMessage(ajcgMessageString);
        #end for
    #end if
#end def
#####################
## Format this one argument. The name of the argument could be returnValue or it could be $arg.name
## so the following code should only use $name.
## The arg_num may be an empty string and is only used to distinguish between dictionary arguments.
## It is presumed that the variable 'String ajcgMessageString'
## is the destination of the output. The caller must do the actual output of this string to the UI.
#####################
#@staticmethod
#def format_arg($arg, $name, $arg_num, $indent_count)
    #set $indent = $indent_count * " "
    #if $arg.is_array and not $arg.is_dictionary
        #set base_sig = $arg.get_flattened_base_signature()
        #if base_sig in $GenAndroid.printf_dictionary.viewkeys()
            #set $f = $GenAndroid.printf_dictionary[base_sig]
${indent}ajcgMessageString = String.format("${name}[0] = '$f'", ${name}[0]);
        #else
${indent}ajcgMessageString = String.format("${name}[0] = '%s'", ${name}[0].toString());
        #end if
    #elif $arg.is_structure
${indent}ajcgMessageString = String.format("$name = '%s'", ${name}.toString());
    #elif $arg.is_dictionary
        #set $kv_types = $GenAndroid.make_dictionary_types($arg.interface, $arg.get_named_type())
        #set $l = "Set<{0}> s{1} = {2}.keySet();".format($kv_types[0], $arg_num, $name)
${indent}$l
        #set $l = "{0} k{1} = s{1}.iterator().next();".format($kv_types[0], $arg_num)
${indent}$l
${indent}ajcgMessageString = String.format("${name}.get(%s) = '%s'", k${arg_num}.toString(), ${name}.get(k$arg_num).toString());
    #else
        #set $f = $GenAndroid.printf_dictionary[$arg.arg_type]
${indent}ajcgMessageString = String.format("$name = '$f'", $name);
    #end if
#end def
#####################
## Define the containers (structures and dictionaries) in this interface.
#####################
#@staticmethod
#def define_containers($interface, $is_runnable, $indent_count)
    #set $indent = $indent_count * ' '
    #set $structures = $interface.get_structs_in_struct_order()
    #for $s in $structures
        #if not isinstance($s, $structdef.StructDef)
            #continue
        #end if
${indent}public class $s.name {
        #set $members = $GenAndroid.make_members_from_structure($interface, $s)
        #set $position = 0
        #for $m in $members
## Each member is composed of three strings which are [type, name, initialization]
${indent}    @Position($position) public $m[0] $m[1]$m[2];
            #set $position += 1
        #end for
        #if $is_runnable

${indent}    $GenAndroid.comment_start_runnable
${indent}    /*
${indent}     * These methods are only used to show changes in the data being communicated.
${indent}     * They are not required for production code.
${indent}     */
${indent}    public void Increment()
${indent}    {
            #set $found_one = False
            #set $incrementable = ["int", "short", "long", "byte", "double"]
            #for $m in $members
                #if $m[0] in $incrementable
                    #set $found_one = True
${indent}        $m[1]++;
                #elif $m[0] == "boolean"
                    #set $found_one = True
${indent}        $m[1] = !$m[1];
                #end if
            #end for
            #if not $found_one
${indent}        /*
${indent}         * TODO: Make a change in '$s.name'.
${indent}         * Structures without any easily incremented members are not fully
${indent}         * supported in "Runnable" mode by the code generator at this time.
${indent}         */
            #end if
${indent}    }

${indent}    /*
${indent}     * Just a simple implementation to show the type.
${indent}     */
${indent}    public String toString()
${indent}    {
${indent}        return "Instance of '$s.name'.";
${indent}    }
${indent}    $GenAndroid.comment_end_runnable
        #end if
${indent}}
    #end for
#end def
