###############################################################################
## Copyright (c) 2014 AllSeen Alliance. All rights reserved.
##
## Contributed by Qualcomm Connected Experiences, Inc.,
## with authorization from the AllSeen Alliance, Inc.
## 
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
## 
##     http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## 
## Pursuant to Section 1 of the License, the work of authorship constituting
## a Work and any Contribution incorporated in the Work shall mean only that
## Contributor's code submissions authored by that Contributor.  Any rights
## granted under the License are conditioned upon acceptance of these
## clarifications.
###############################################################################
#import GenAndroid
#import CommonCheetah as cc
#from .. import common
/* Source: "$command_line.absolute_path_xml_input_file" */

package $command_line.well_known_name;

import org.alljoyn.bus.BusAttachment;
import org.alljoyn.bus.BusException;
import org.alljoyn.bus.ErrorReplyBusException;
import org.alljoyn.bus.BusListener;
import org.alljoyn.bus.Mutable;
import org.alljoyn.bus.ProxyBusObject;
import org.alljoyn.bus.SessionListener;
import org.alljoyn.bus.SessionOpts;
import org.alljoyn.bus.Status;

/* Service imports. */
#for $key in $sorted($service.interfaces)
    #set $interface = $service.interfaces[$key]
import ${interface.interface_full_name};
    #if $interface.signals
import ${interface.interface_full_name}Impl;
    #end if
#end for

/* Android imports. */
import android.app.Activity;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.Message;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.inputmethod.EditorInfo;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
#if $service.has_dictionaries
import java.util.HashMap;
#end if
#if $service.has_dictionaries and $command_line.runnable
import java.util.Set;
#end if

public class ClientMain extends Activity {
    /* Load the native alljoyn_java library. */
    static {
        System.loadLibrary("alljoyn_java");
    }

    /* These are the messages sent to the BusHandler from the UI. */
    private enum BusHandlerMessageIds {
        CONNECT,
        JOIN_SESSION,
        DISCONNECT,
        UTILIZE_SERVICE,
    }

    /* These are messages used in the UI loop. */
    private enum UiHandlerMessageIds {
        MESSAGE_POST_TOAST,
        START_FIND_WELL_KNOWN_NAME_PROGRESS_DIALOG,
        STOP_FIND_WELL_KNOWN_NAME_PROGRESS_DIALOG,
        START_JOIN_SESSION_PROGRESS_DIALOG,
        STOP_JOIN_SESSION_PROGRESS_DIALOG,
#set $object_list = $service.get_objects()
#for $o in $object_list
    #set $obj_name = $o.get_full_coded_name(True)
    #for $i in $o.interfaces
        MESSAGE_${obj_name}_$i.interface_name,
    #end for
#end for
    }

    private static final String TAG = "ClientMain";

    private EditText mEditText;
    private ArrayAdapter<String> mListViewArrayAdapter;
    private ListView mListView;

    /* Handler used to make calls to AllJoyn methods. See onCreate(). */
    private BusHandler mBusHandler;

    private ProgressDialog mDialog;

    /*
     * This is the method to handle a messages sent to the UI from the BusAttachment.
     */
    private Handler mHandler = new Handler() {
            @Override
            public void handleMessage(Message msg) {
                if (msg.what == UiHandlerMessageIds.MESSAGE_POST_TOAST.ordinal()) {
                    Toast.makeText(getApplicationContext(), (String) msg.obj, Toast.LENGTH_LONG).show();
                } else if (msg.what == UiHandlerMessageIds.START_FIND_WELL_KNOWN_NAME_PROGRESS_DIALOG.ordinal()) {
                    mDialog = ProgressDialog.show(ClientMain.this,
                                                  "",
                                                  "Finding ${command_line.well_known_name}.\nPlease wait...",
                                                  true,
                                                  true);
                } else if (msg.what == UiHandlerMessageIds.STOP_FIND_WELL_KNOWN_NAME_PROGRESS_DIALOG.ordinal() ||
                           msg.what == UiHandlerMessageIds.STOP_JOIN_SESSION_PROGRESS_DIALOG.ordinal()) {
                    mDialog.dismiss();
                } else if (msg.what == UiHandlerMessageIds.START_JOIN_SESSION_PROGRESS_DIALOG.ordinal()) {
                    mDialog = ProgressDialog.show(ClientMain.this,
                                                  "",
                                                  "Joining session.\nPlease wait...",
                                                  true,
                                                  true);
                } else {
                    String sendMsg = UiHandlerMessageIds.values()[msg.what].name() + ": " + (String) msg.obj;

                    mListViewArrayAdapter.add(sendMsg);
                }
            }
        };

    /*
     * This is the method to handle a the onCreate event.
     */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        mListViewArrayAdapter = new ArrayAdapter<String>(this, R.layout.message);
        mListView = (ListView) findViewById(R.id.ListView);
        mListView.setAdapter(mListViewArrayAdapter);

        mEditText = (EditText) findViewById(R.id.EditText);
        mEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            public boolean onEditorAction(TextView view, int actionId, KeyEvent event) {
                if (actionId == EditorInfo.IME_NULL && event.getAction() == KeyEvent.ACTION_UP) {
                    /* TODO: Add user interaction here.
                     * Create and send a messages something like this:
                     */
                    String str = view.getText().toString();
                    int id = BusHandlerMessageIds.UTILIZE_SERVICE.ordinal();
                    Message msg = mBusHandler.obtainMessage(id, str);

                    mBusHandler.sendMessage(msg);
                }
                return true;
            }
        });

        /* Make all AllJoyn calls through a separate handler thread to prevent blocking the UI. */
        HandlerThread busThread = new HandlerThread("BusHandler");
        busThread.start();
        mBusHandler = new BusHandler(busThread.getLooper());

        /* Connect to an AllJoyn object. */
        mBusHandler.sendEmptyMessage(BusHandlerMessageIds.CONNECT.ordinal());
        mHandler.sendEmptyMessage(UiHandlerMessageIds.START_FIND_WELL_KNOWN_NAME_PROGRESS_DIALOG.ordinal());
    }

    /*
     * This is the method to handle the creation of an options menu.
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.mainmenu, menu);
        return true;
    }

    /*
     * This is the method to handle an item selection.
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
        case R.id.quit:
            finish();
            return true;
        default:
            return super.onOptionsItemSelected(item);
        }
    }

    /*
     * This is the method to handle the onDestroy event for the application.
     */
    @Override
    protected void onDestroy() {
        super.onDestroy();

        /* Disconnect to prevent resource leaks. */
        mBusHandler.sendEmptyMessage(BusHandlerMessageIds.DISCONNECT.ordinal());
    }

    /* This class will handle all AllJoyn calls. See onCreate(). */
    class BusHandler extends Handler {
        /*
         * Name used as the well-known name and the advertised name of the service this client is
         * interested in. This name must be a unique name both to the bus and to the network as a
         * whole.
         *
         * The name uses reverse URL style of naming, and matches the name used by the service.
         */
        private static final String WELL_KNOWN_NAME = "$command_line.well_known_name";
        private static final short CONTACT_PORT = 24;

        private BusAttachment mBus = null;
#for $o in $object_list
    #set $obj_name = $o.get_full_coded_name(True)
        private ProxyBusObject m${obj_name}ProxyObj = null;
    #for $i in $o.interfaces
        private $i.interface_name m${obj_name}_$i.interface_name = null;
        #if $i.signals
        private $i.interface_name m${obj_name}_${i.interface_name}SigHandler = null;
        #end if
    #end for
#end for

        /* This is the sessionId assigned by the service connected with. */
        private int mSessionId;

        /* This is set to true if the well-known name has been found and the session successfully joined. */
        private boolean mIsConnected;

        /* This is set to true when disconnecting so that last second joining of sessions will not occur. */
        private boolean mIsStoppingDiscovery;

        /* This is set to true if the well-known name has been found so that subsequent finds can be ignored.
         * This is only an issue when multiple transports are found. The decision as to which transport
         * should be used is application specific. It possible that multiple transports are desired. In which
         * case multiple sessions should be joined. These decisions are up to the application developer. In
         * the generated code we accept the first one that arrives. This means that different transports
         * may be used in subsequent invocations as there is no guarantee which "foundAdvertisedName()"
         * message arrives first. See also the comments in the foundAdvertisedName() method further below.
         */
        private boolean mFoundWellKnownName;

        public BusHandler(Looper looper) {
            super(looper);

            mIsConnected = false;
            mIsStoppingDiscovery = false;
        }

        /*
         * This is the handler for messages sent to the BusAttachment from the UI.
         */
        @Override
        public void handleMessage(Message msg) {
            if (msg.what == BusHandlerMessageIds.UTILIZE_SERVICE.ordinal()) {
                utilizeService(msg);
            } else if (msg.what == BusHandlerMessageIds.CONNECT.ordinal()) {
                doConnect();
            } else if (msg.what == BusHandlerMessageIds.JOIN_SESSION.ordinal()) {
                doJoinSession(msg);
            } else if (msg.what == BusHandlerMessageIds.DISCONNECT.ordinal()) {
                doDisconnect();
            }
        }

        /*
         * Connect to a remote instance of an object implementing the interfaces.
         */
        private Status doConnect() {
            org.alljoyn.bus.alljoyn.DaemonInit.PrepareDaemon(getApplicationContext());

            /*
             * All communication through AllJoyn begins with a BusAttachment.
             *
             * A BusAttachment needs a name. The actual name is unimportant except for internal
             * security. As a default we use the class name as the name.
             *
             * By default AllJoyn does not allow communication between devices (i.e. bus to bus
             * communication). The second argument must be set to Receive to allow communication
             * between devices.
             */
            mBus = new BusAttachment(getPackageName(), BusAttachment.RemoteMessage.Receive);

            /*
             * Create a bus listener class
             */
            mBus.registerBusListener(new BusListener() {
                @Override
                public void foundAdvertisedName(String name, short transport, String namePrefix) {
                    /*
                     * This client will only join the first service that it sees advertising
                     * the indicated well-known name. If the program is already a member of
                     * a session (i.e. connected to a service) we will not attempt to join
                     * another session. If the use of a particular transport is important
                     * then check "transport" bit mask for the transport of interest.
                     * The details of the transport mask are documented in the SessionOpts class here:
                     * https://allseenalliance.org/docs/api/java/org/alljoyn/bus/SessionOpts.html.
                     * See also the comments associated with the declaration of the member
                     * variable mFoundWellKnownName above.
                     */
                    mBus.cancelFindAdvertisedName(WELL_KNOWN_NAME);

                    String formatString = "MyBusListener.foundAdvertisedName(%s, 0x%04x, %s)";
                    String logMess = String.format(formatString, name, transport, namePrefix);

                    logMessage(logMess);

                    if (mFoundWellKnownName) {
                        logMessage("Extra find of advertised name ignored.");
                        return;
                    }

                    mFoundWellKnownName = true;

                    int id = UiHandlerMessageIds.STOP_FIND_WELL_KNOWN_NAME_PROGRESS_DIALOG.ordinal();

                    mHandler.sendEmptyMessage(id);
                    id = BusHandlerMessageIds.JOIN_SESSION.ordinal();

                    Message msg = obtainMessage(id);

                    msg.arg1 = transport;
                    msg.obj = name;
                    sendMessage(msg);

                    id = UiHandlerMessageIds.START_JOIN_SESSION_PROGRESS_DIALOG.ordinal();
                    mHandler.sendEmptyMessage(id);
                }
            });

            /* To communicate with AllJoyn objects, we must connect the BusAttachment to the bus. */
            Status status = mBus.connect();

            logStatus("BusAttachment.connect()", status);

            if (Status.OK != status) {
                finish();
                return status;
            }

#if $service.has_signals
    #for $o in $object_list
        #set $obj_name = $o.get_full_coded_name(True)
        #for $i in $o.interfaces
            #if $i.signals
            if (null == m${obj_name}_${i.interface_name}SigHandler) {
                m${obj_name}_${i.interface_name}SigHandler = new ${i.interface_name}Impl(mHandler, #slurp
UiHandlerMessageIds.MESSAGE_${obj_name}_${i.interface_name}.ordinal());
            }

            mBus.registerSignalHandlers(m${obj_name}_${i.interface_name}SigHandler);

            #end if
        #end for
    #end for
#end if
            /*
             * Now find an instance of the AllJoyn object we want to call. We start by looking for
             * a name, then connecting to the device that is advertising that name.
             *
             * In this case, we are looking for WELL_KNOWN_NAME.
             */
            mFoundWellKnownName = false;
            status = mBus.findAdvertisedName(WELL_KNOWN_NAME);

            String formatString = "BusAttachment.findAdvertisedName(%s)";
            String logMess = String.format(formatString, WELL_KNOWN_NAME);

            logStatus(logMess, status);

            if (Status.OK != status) {
                finish();
            }

            return status;
        }

        private Status doJoinSession(Message msg) {
            Status status = Status.OK;

            /*
             * If discovery is currently being stopped don't join to any other sessions.
             */
            if (mIsStoppingDiscovery) {
                return status;
            }

            /*
             * In order to join the session, we need to provide the well-known contact port.
             * This is pre-arranged between both sides as part of the definition of the service.
             * As a result of joining the session, we get a session identifier which we must use
             * to identify the created session communication channel whenever we talk to the
             * remote side.
             */
            short contactPort = CONTACT_PORT;
            SessionOpts sessionOpts = new SessionOpts();
            sessionOpts.transports = (short) msg.arg1;
            Mutable.IntegerValue sessionId = new Mutable.IntegerValue();

            SessionListener listener = new SessionListener() {
                @Override
                public void sessionLost(int sessionId, int reason) {
                    String formatString = "MyBusListener.sessionLost(sessionId = %d, reason = %d)";
                    String logMess = String.format(formatString, sessionId, reason);

                    logMessage(logMess);

                    int id = UiHandlerMessageIds.START_FIND_WELL_KNOWN_NAME_PROGRESS_DIALOG.ordinal();

                    mFoundWellKnownName = false;
                    mHandler.sendEmptyMessage(id);
                    mIsConnected = false;
                }
            };

            status = mBus.joinSession((String) msg.obj, contactPort, sessionId, sessionOpts, listener);
            mHandler.sendEmptyMessage(UiHandlerMessageIds.STOP_JOIN_SESSION_PROGRESS_DIALOG.ordinal());
            logStatus("mBus.joinSession() - sessionId: " + sessionId.value, status);

            if (status == Status.OK) {
                /*
                 * To communicate with an AllJoyn object, we create a ProxyBusObject.
                 * A ProxyBusObject is composed of a name, path, sessionID and interfaces.
                 *
                 * The ProxyBusObjects are located at the well-known WELL_KNOWN_NAME,
                 * use sessionID of CONTACT_PORT, and implement one or more interfaces.
                 */
#for $o in $object_list
    #set $obj_name = $o.get_full_coded_name(True)
                final String OBJECT_NAME_$obj_name = "$o.name";

                m${obj_name}ProxyObj =
                    mBus.getProxyBusObject(WELL_KNOWN_NAME,
                                           OBJECT_NAME_$obj_name,
                                           sessionId.value,
                                           new Class<?>[] {
    #for $i in $o.interfaces
                                               ${i.interface_name}.class,
    #end for
                                        });
#end for

                /* We make calls to the methods of the AllJoyn object through one of its interfaces. */
#for $o in $object_list

    #set $obj_name = $o.get_full_coded_name(True)
    #for $i in $o.interfaces
                if (m${obj_name}ProxyObj != null) {
                    m${obj_name}_$i.interface_name = m${obj_name}ProxyObj.getInterface(${i.interface_name}.class);

                    if (m${obj_name}_$i.interface_name == null) {
                        status = Status.BUS_UNKNOWN_INTERFACE;
                        logStatus("m${obj_name}ProxyObj.getInterface() failed.", status);
                    }
                } else {
                    status = Status.BUS_OBJ_NOT_FOUND;
                    logStatus("m${obj_name}ProxyObj = mBus.getProxyBusObjectm() failed.", status);
                }
    #end for
#end for

                mSessionId = sessionId.value;
                mIsConnected = true;
                logStatus("mBus.joinSession() succeeded.", status);
            } else {
#for $o in $object_list
    #set $obj_name = $o.get_full_coded_name(True)
                m${obj_name}ProxyObj = null;
#end for
#for $o in $object_list
    #set $obj_name = $o.get_full_coded_name(True)
    #for $i in $o.interfaces
                m${obj_name}_$i.interface_name = null;
    #end for
#end for
                mSessionId = 0;
                mIsConnected = false;
                logStatus("mBus.joinSession() failed.", status);
            }

            return status;
        }

        private Status doDisconnect() {
            Status status = Status.OK;

#if $service.has_signals
    #for $o in $object_list
        #set $obj_name = $o.get_full_coded_name(True)
        #for $i in $o.interfaces
            #if $i.signals
            mBus.unregisterSignalHandlers(m${obj_name}_${i.interface_name}SigHandler);
            #end if
        #end for
    #end for

#end if
            mIsStoppingDiscovery = true;
            mFoundWellKnownName = false;

            if (mIsConnected) {
                status = mBus.leaveSession(mSessionId);

                logStatus("BusAttachment.leaveSession()", status);
            }

            mBus.disconnect();
            getLooper().quit();

            return status;
        }

#if $command_line.runnable
$ClientMain.define_persistent_client_args($service, 8)#slurp
#end if
        /*
         * Execute methods, set and query properties on the service.
         */
        private Status utilizeService(Message msg) {
            Status status = Status.OK;

#if $command_line.runnable
            /* This is just some simple code that demonstrates exercising
             * the server services. This should be replaced with code that
             * does something useful.
             */
            $GenAndroid.comment_start_runnable
    #for $o in $object_list
        #set $obj_name = $o.get_full_coded_name(True)
        #for $i in $o.interfaces
            #set $iname = $ClientMain.make_instance_interface_name($o, $interface)
            if ($iname != null) {
$ClientMain.call_methods($o, $i, 16)#slurp
            #if $i.properties

            #end if
$ClientMain.get_set_properties($o, $i, 16)#slurp
            } else {
                logMessage("Interface ${iname} is null!");
            }
        #end for
    #end for
            $GenAndroid.comment_end_runnable
#else
            /* TODO: Do tasks via the service.
             * Any instance of an interface can be called directly from here.
             * An example would be:
             *
             * mOneOfMyInterfaceInstances.someServerMethod(msg);
             */
#end if

            return status;
        }

        /* Helper function to send a message to the UI thread. */
        private void sendUiMessage(int what, Object obj) {
            mHandler.sendMessage(mHandler.obtainMessage(what, obj));
        }

#if $command_line.runnable
        /*
         * Handle the error reporting for an exception and return a status value.
         */
        private Status doExceptionReport(String who, BusException be) {
            String message = String.format("Exception occured when calling %s().", who);
            Status returnValue = Status.BUS_ERRORS;
            ErrorReplyBusException error = (ErrorReplyBusException) be.getCause();

            if (error != null) {
                returnValue = error.getErrorStatus();
            }

            logException(message, be);

            return returnValue;
        }
#end if
    }

    /*
     * Output the status or result to the Android log. If the result is the expected
     * result only output it to the log. Otherwise output it to the error log and
     * Sent a Toast to the users screen.
     */
    private void logStatus(String msg, Status status) {
        String log = String.format("%s: %s", msg, status);

        if (status == Status.OK) {
            Log.i(TAG, log);
        } else {
            Message toastMsg = mHandler.obtainMessage(UiHandlerMessageIds.MESSAGE_POST_TOAST.ordinal(), log);
            mHandler.sendMessage(toastMsg);
            Log.e(TAG, log);
        }
    }

    /*
     * Send the exception message to the Android log and send a Toast to the users screen.
     */
    private void logException(String msg, BusException ex) {
        String log = String.format("%s: %s", msg, ex);
        Message toastMsg = mHandler.obtainMessage(UiHandlerMessageIds.MESSAGE_POST_TOAST.ordinal(), log);
        mHandler.sendMessage(toastMsg);
        Log.e(TAG, log, ex);
    }

    /*
     * Output a string message but no status to the Android log.
     */
    private void logMessage(String msg) {
            Log.i(TAG, msg);
    }
}
#####################
## Call the methods in this interface.
#####################
#@staticmethod
#def call_methods($object, $interface, $indent_count)
    #set $indent = $indent_count * " "
    #set $add_newline = False
    #set $obj_name = $object.get_full_coded_name(True)
    #if len($interface.methods) > 0
        #for $m in $interface.methods
            #if $add_newline

            #end if
            #set $return_type = $GenAndroid.get_java_return_type($m)
            #set $return_arg = $GenAndroid.get_return_arg($m)
            #if $m.input_arg_info.args
                #set $instance_name = $cc.CommonCheetah.make_persistent_instance_name($object, $interface, $m)
${indent}${instance_name}.incrementArgs();
            #end if
${indent}try {
$ClientMain.call_method($object, $interface, $m, $indent_count + 4)#slurp
${indent}} catch (BusException be) {
            #set $cc_name = $common.make_camel_case($m.name, None)
            #set $iname = $ClientMain.make_instance_interface_name($object, $interface)
${indent}    status = doExceptionReport("${iname}.${cc_name}", be);
${indent}}
            #set $add_newline = True
        #end for
    #end if
#end def
#####################
## Call the method, format the return value, if any, into a string and send the string to the user.
#####################
#@staticmethod
#def call_method($object, $interface, $method, $indent_count)
    #set $indent = $indent_count * " "
    #set $cc_name = $common.make_camel_case($method.name, None)
    #set $iname = $ClientMain.make_instance_interface_name($object, $interface)
    #set $method_instance = "{0}.{1}".format($iname, $cc_name)
    #set $obj_name = $object.get_full_coded_name(True)
    #set $return_type = $GenAndroid.get_java_return_type($method)
    #set $return_arg = $GenAndroid.get_return_arg($method)
${indent}int what = UiHandlerMessageIds.MESSAGE_${obj_name}_${interface.interface_name}.ordinal();
    #if $return_arg
${indent}String ajcgMessageString;

${indent}$return_type returnValue = ${method_instance}($cc.CommonCheetah.add_args($object, $interface, $method));
        #set $instance_name = $cc.CommonCheetah.make_persistent_instance_name($object, $interface, $method)
$ClientMain.print_return_value($instance_name, $return_arg, $indent_count)#slurp
    #else
${indent}${method_instance}($cc.CommonCheetah.add_args($object, $interface, $method));
${indent}sendUiMessage(what, "Successfully called ${method_instance}()");
    #end if
#end def
#####################
## Get and set the properties in this interface.
#####################
#@staticmethod
#def get_set_properties($object, $interface, $indent_count)
    #set $iname = $ClientMain.make_instance_interface_name($object, $interface)
    #set $indent = $indent_count * " "
    #set $add_newline = False
    #set $obj_name = $object.get_full_coded_name(True)
    #if $interface.properties
        #for $p in $interface.properties
            #set $complete_name = $GenAndroid.get_complete_name($obj_name, $interface.interface_name, $p)
            #if $p.is_writeable()
                #if $add_newline

                #end if
                #set $add_newline = True
                #set $instance_name = $cc.CommonCheetah.make_persistent_instance_name($object, $interface, $p)
${indent}${instance_name}.incrementArgs();
## This is the set property code.
${indent}try {
${indent}    int what = UiHandlerMessageIds.MESSAGE_${obj_name}_${interface.interface_name}.ordinal();
${indent}    String ajcgMessageString = "Calling ${iname}.set${p.name}().";

${indent}    sendUiMessage(what, ajcgMessageString);
${indent}    ${iname}.set${p.name}($cc.CommonCheetah.add_args($object, $interface, $p));
${indent}} catch (BusException be) {
${indent}    status = doExceptionReport("${iname}.set${p.name}", be);
${indent}}
            #end if
## This is the get property code.
            #if $p.is_readable()
                #if $add_newline

                #end if
                #set $add_newline = True
## This is the get property code.
${indent}try {
                #set $return_type = $GenAndroid.get_java_return_type($p)
                #set $a = $p.output_arg_info.args[0]
${indent}    int what = UiHandlerMessageIds.MESSAGE_${obj_name}_${interface.interface_name}.ordinal();
${indent}    String ajcgMessageString;

${indent}    $return_type returnValue = ${iname}.get${p.name}();

                #set $return_arg = $GenAndroid.get_return_arg($p)
                #set $instance_name = $cc.CommonCheetah.make_persistent_instance_name($object, $interface, $p)
$ClientMain.print_return_value($instance_name, $return_arg, $indent_count + 4)#slurp
${indent}} catch (BusException be) {
${indent}    status = doExceptionReport("${iname}.get${p.name}", be);
${indent}}
            #end if
        #end for
    #end if
#end def
#####################
## Make the name of the interface instance variable.
#####################
#@staticmethod
#def make_instance_interface_name($object, $interface)
    #return "m{0}_{1}".format($object.get_full_coded_name(True), $interface.interface_name)
#end def
#####################
## Print a 'return value' from a method or property (a read value) to the user interface.
#####################
#@staticmethod
#def print_return_value($name, $return_arg, $indent_count)
    #set $indent = $indent_count * " "
$cc.CommonCheetah.format_arg($return_arg, "returnValue", "", $indent_count)
${indent}sendUiMessage(what, ajcgMessageString);
#end def
#####################
## Define persistent version of the argument(s) for client runnable code.
#####################
#@staticmethod
#def define_persistent_client_args($service, $indent_count)
    #if $GenAndroid.has_persistent_args($service, True)
        #set $indent = $indent_count * " "
$indent$GenAndroid.comment_start_runnable
        #for $key in sorted($service.interfaces):
            #set $interface = $service.interfaces[$key]
$cc.CommonCheetah.define_interface_persistent_classes($interface, True, $indent_count)#slurp
        #end for
        #for $o in $service.get_objects()
            #for $i in $o.interfaces
                #for $m in $i.methods
$cc.CommonCheetah.declare_instance_of_persistent_class($o, $i, $m, True, $indent_count)
                #end for
                #for $p in $i.properties
$cc.CommonCheetah.declare_instance_of_persistent_class($o, $i, $p, True, $indent_count)
                #end for
## There is no persistent data needed for signals on the client side.
            #end for
        #end for
$indent$GenAndroid.comment_end_runnable
    #end if
#end def
