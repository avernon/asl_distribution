###############################################################################
## Copyright (c) 2014 AllSeen Alliance. All rights reserved.
##
## Contributed by Qualcomm Connected Experiences, Inc.,
## with authorization from the AllSeen Alliance, Inc.
## 
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
## 
##     http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## 
## Pursuant to Section 1 of the License, the work of authorship constituting
## a Work and any Contribution incorporated in the Work shall mean only that
## Contributor's code submissions authored by that Contributor.  Any rights
## granted under the License are conditioned upon acceptance of these
## clarifications.
###############################################################################
#import GenAndroid
#import CommonCheetah as cc
#from .. import common
/* Source: "$command_line.absolute_path_xml_input_file" */

package $interface.get_path();

#if $interface.dictionaries
import java.util.HashMap;
#end if
#if $service.has_dictionaries and $command_line.runnable
import java.util.Set;
#end if
import org.alljoyn.bus.BusObject;
#if $interface.signals
import org.alljoyn.bus.BusException;
#end if

import android.os.Handler;

/* The AllJoyn service implementation of $interface.interface_full_name. */
public class ${interface.interface_name}Impl implements $interface.interface_name, BusObject {
    private Handler mHandler;   /* Means by which to send message to the user interface. */
    private int mMessageId;     /* Identifier to be used for this interface instance in UI messages. */
#if $GenAndroid.interface_needs_persistent_data($interface, False)
    #if $command_line.runnable

    $GenAndroid.comment_start_runnable
$cc.CommonCheetah.define_interface_persistent_classes($interface, False, 4)#slurp
$cc.CommonCheetah.declare_interface_persistent_data(None, $interface, False, 4)#slurp
    $GenAndroid.comment_end_runnable
    #end if
#end if

    /*
     * Constructor for the ${interface.interface_name}Impl class.
     * h is used to send messages sent back to the user interface.
     * messageId, is the identifier to use for sending message from this interface instance.
     */
    public ${interface.interface_name}Impl(Handler h, int messageId)
    {
        mHandler = h;
        mMessageId = messageId;
        sendUiMessage("Created an instance of ${interface.interface_name}Imp.");
    }

## Implement all of the methods in this interface.
    #for $m in $interface.methods
        #set $return_type = $GenAndroid.get_java_return_type(m)
    public $return_type $common.make_camel_case($m.name, None)($m.input_arg_info.arg_declaration) {
        #if $command_line.runnable
        $GenAndroid.comment_start_runnable
        sendUiMessage("${m.name}() successfully called.");
$cc.CommonCheetah.print_args($m.input_arg_info.args, 8)#slurp
            #if $return_type != "void"

$cc.CommonCheetah.increment_args(None, $interface, $m, $m.output_arg_info.args, 8)
                #set $instance_name = $cc.CommonCheetah.make_persistent_instance_name(None, $interface, $m)
        return $instance_name.$m.output_arg_info.args[0].name;
            #end if
        $GenAndroid.comment_end_runnable
        #else
        /* TODO: Implement the method. */
            #if $return_type != "void"
                #set $arg = $GenAndroid.get_return_arg($m)
        $return_type returnValue$GenAndroid.get_initialization($arg, $m);
        return returnValue;
            #end if
        #end if
    }

    #end for
## Implement all of the properties in this interface.
    #for $p in $interface.properties
        #set $instance_name = $cc.CommonCheetah.make_persistent_instance_name(None, $interface, $p)
        #if $p.is_writeable()
    public void set${p.name}($p.input_arg_info.arg_declaration) {
            #if $command_line.runnable
        $GenAndroid.comment_start_runnable
        sendUiMessage("Property set${p.name}() called.");
                #if $p.is_readable()
                    #set $out_name = $p.output_arg_info.args[0].name
                    #set $in_name = $p.input_arg_info.args[0].name
        $instance_name.$out_name = $in_name;
                #end if
$cc.CommonCheetah.print_args($p.input_arg_info.args, 8)#slurp
        $GenAndroid.comment_end_runnable
            #else
        /* TODO: Do something with the request to change the property value. */
            #end if
    }

        #end if
        #if $p.is_readable()
            #set $arg = $p.output_arg_info.args[0]
            #set $return_type = $GenAndroid.get_java_return_type(p)
    public $return_type get${p.name}() {
            #if $command_line.runnable
        $GenAndroid.comment_start_runnable
$cc.CommonCheetah.increment_args(None, $interface, $p, $p.output_arg_info.args, 8)
            #set $arg_name = $p.output_arg_info.args[0].name
        return $instance_name.$arg_name;
        $GenAndroid.comment_end_runnable
            #else
        /* TODO: Implement the property and return the value. */
        $return_type returnValue$GenAndroid.get_initialization($arg, $p);

        return returnValue;
            #end if
    }
        #end if

    #end for
## Create an empty implementation of all the signals in this interface.
    #for $s in $interface.signals
    /*
     * Intentionally empty implementation of the signal. Since this is only used
     * as an emitter it will never be called.
     */
    public void $common.make_camel_case($s.name, None)($s.output_arg_info.arg_declaration) throws BusException {
    }

    #end for
    /* Helper function to send a message to the UI thread. */
    private void sendUiMessage(String message) {
        mHandler.sendMessage(mHandler.obtainMessage(mMessageId, message));
    }
}
