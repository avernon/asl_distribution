###############################################################################
## Copyright (c) 2013 AllSeen Alliance. All rights reserved.
##
## Contributed by Qualcomm Connected Experiences, Inc.,
## with authorization from the AllSeen Alliance, Inc.
## 
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
## 
##     http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## 
## Pursuant to Section 1 of the License, the work of authorship constituting
## a Work and any Contribution incorporated in the Work shall mean only that
## Contributor's code submissions authored by that Contributor.  Any rights
## granted under the License are conditioned upon acceptance of these
## clarifications.
###############################################################################
#import GenTL
#import CommonCheetah as cc
/* Source: "$command_line.xml_input_file" */

\#include <ajtcl/alljoyn.h>

/* Interface: "$interface.interface_full_name" */

## Get the client side defines for this interface.
#set $defines = $GenTL.get_defines($interface, True)
#for $d in $defines
$d
#end for

$cc.CommonCheetah.define_containers($interface)
## For this interface find all the AllJoyn objects that instantiate it.
#for $o in $interface.parents
    #set $iface_index = $o.get_interface_index($interface)
    #set $comp = $GenTL.get_interface_components($interface, $o, $iface_index, True)
    #for $c in $comp
$cc.CommonCheetah.function_header($o, $c, False)#slurp
$function_declaration(c)
    #end for
#end for
######################
## Declare the functions used for interfacing with a property.
###################### 
#def property_declaration($c)
    #if len($c.input_arg_info.args) > 0
extern AJ_Status ${c.name}_Set(AJ_BusAttachment* bus, uint32_t sessionId, $c.input_arg_info.arg_declaration);
    #end if
    #if len($c.output_arg_info.args) > 0
extern AJ_Status ${c.name}_Get(AJ_BusAttachment* bus, uint32_t sessionId);
    #end if
#end def
######################
## Declare the function used for interfacing with a method.
###################### 
#def method_declaration($c)
        #if $c.input_arg_info is not None and len($c.input_arg_info.args) > 0
extern AJ_Status ${c.name}_Caller(AJ_BusAttachment* bus, uint32_t sessionId, $c.input_arg_info.arg_declaration);
        #else
extern AJ_Status ${c.name}_Caller(AJ_BusAttachment* bus, uint32_t sessionId);
        #end if
#end def
######################
## Declare the function used for a reply handler or signal.
###################### 
#def reply_handler_declaration($c)
    #if not $c.no_reply
        #if $c.comp_type == "sig"
extern AJ_Status ${c.name}(AJ_Message* msg);
        #elif $c.comp_type == "prop"
extern AJ_Status ${c.name}_GetHandler(AJ_Message* msg, void* context);
        #else
            #assert($c.comp_type == "meth")
extern AJ_Status ${c.name}_ReplyHandler(AJ_Message* msg);
        #end if
    #end if
#end def
######################
## Declare the function used for a property, method, or signal.
###################### 
#def function_declaration($c)
        #if $c.comp_type == "meth"
$method_declaration($c)#slurp
        #elif $c.comp_type == "prop"
$property_declaration($c)#slurp
        #end if
$reply_handler_declaration($c)#slurp
#end def
#if not $command_line.runnable
\#ifndef AJCG_NO_UNUSED_WARNING
\#define AJCG_NO_UNUSED_WARNING(v) v = v
\#endif
#end if
