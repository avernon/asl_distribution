###############################################################################
## Copyright (c) 2013-2014 AllSeen Alliance. All rights reserved.
##
## Contributed by Qualcomm Connected Experiences, Inc.,
## with authorization from the AllSeen Alliance, Inc.
## 
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
## 
##     http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## 
## Pursuant to Section 1 of the License, the work of authorship constituting
## a Work and any Contribution incorporated in the Work shall mean only that
## Contributor's code submissions authored by that Contributor.  Any rights
## granted under the License are conditioned upon acceptance of these
## clarifications.
###############################################################################
#import GenTL
#from .. import argdef

#@staticmethod
#def function_header($object, $component, $is_service)
    #if $component.input_arg_info is not None
        #set $input_args = $component.input_arg_info.arg_declaration
    #else
        #set $input_args = None
    #end if
/*****
 * Path (node): "$object.get_full_name()"
 * XML name: "${component.xml_name}($input_args)"
    #if $component.output_arg_info is not None and\
        len($component.output_arg_info.args) > 0
        #set $is_first = True
        #for $a in $component.output_arg_info.args
            #set $t = $GenTL.get_base_c_type($a.interface, $a.arg_type)
            #set $ptrs = $a.get_indirection_level() * "*"
            #if $is_first
 * Output: $t$ptrs $a.name
                #set $is_first = False
            #else
 *         $t$ptrs $a.name
            #end if
        #end for
    #end if
    #if $component.comp_type == "sig"
        #if $is_service
 * Sends the signal. The sessionId argument should be the session ID of the
 * client recipient.
        #else
 * Receives the signal from the service.
        #end if
    #end if
 */
#end def
#@staticmethod
#def handle_error($runnable, $func_name, $indent_count, $free_list = [])
    #set $indent = $indent_count * " "
${indent}if (AJ_OK != ajcgStatus) {
    #if $runnable
${indent}    $GenTL.comment_start_runnable
${indent}    AJ_AlwaysPrintf(("${func_name}() returned status 0x%x (%s).\n", ajcgStatus, AJ_StatusText(ajcgStatus)));
${indent}    $GenTL.comment_end_runnable
    #else
${indent}    $GenTL.comment_handle_error
    #end if
    #for $f in $free_list
    ${indent}AJ_Free((void*)$f);
    #end for

${indent}    return ajcgStatus;
${indent}}
#end def
#####################
## Define static versions of any variants which are structure/dictionary members in any of
## these args.  This is called from define_static_args which is only called from ClientDoWork
## and ServiceDoWork when the Runnable flag is set.
#####################
#@staticmethod
#def define_static_structure_variants($args, $indent_count)
    #set $indent = $indent_count * " "
    #for $a in $args
        #set $c = $a.get_container()
        #if $c is not None
            #set $index = 1
            #set $member_num = 0
            #while $c[$index] != ')' and $c[$index] != '}'
                #if $c[$index] == 'v'
${indent}static int32_t s_${a.name}Member${member_num}Vint32;
${indent}static uint8_t s_${a.name}Member${member_num}Vuint8;
                #end if
                #set $index += 1
                #set $member_num += 1
            #end while
        #end if
    #end for
#end def
#####################
## Initialize any variants which are structure/dictionary members in any of these args.
## This is called from initialize_args which is only called from ClientDoWork and
## ServiceDoWork when the Runnable flag is set.
#####################
#@staticmethod
#def initialize_structure_variants($args, $indent_count)
    #set $indent = $indent_count * " "
    #for $a in $args
        #set $c = $a.get_container()
        #if $c is not None
            #set $index = 1
            #set $member_num = 0
            #while $c[$index] != ')' and $c[$index] != '}'
                #if $c[$index] == 'v'
${indent}/* Variant structure member s_${a.name}.member$member_num is one of two types. */
${indent}if (s_${a.name}Member${member_num}Vuint8 % 2) {
${indent}    AJ_InitArg(&s_${a.name}.member$member_num, AJ_ARG_BYTE, 0, &s_${a.name}Member${member_num}Vuint8, 0);
${indent}    s_${a.name}.member${member_num}.sigPtr = "y";
${indent}} else {
${indent}    AJ_InitArg(&s_${a.name}.member$member_num, AJ_ARG_INT32, 0, &s_${a.name}Member${member_num}Vint32, 0);
${indent}    s_${a.name}.member${member_num}.sigPtr = "i";
${indent}}

${indent}s_${a.name}Member${member_num}Vuint8++;
${indent}s_${a.name}Member${member_num}Vint32--;
                #end if
                #set $index += 1
                #set $member_num += 1
            #end while
        #end if
    #end for
#end def
#####################
## Initialize argument(s) from the static versions. This is used by
## ClientDoWork and ServiceDoWork. See those files for more context.
#####################
#@staticmethod
#def initialize_args($args, $complete_name, $indent_count)
    #set $indent = $indent_count * " "
${indent}/* Initializing. */
$CommonCheetah.initialize_structure_variants($args, $indent_count)
    #for $a in $args
        #set $s = $a.get_base_signature()[0]
        #if $a.is_array()
${indent}${a.name}Elements = ArraySize(s_$a.name);
            #if $a.get_base_signature() in ('s', 'o', 'g')
                #set $cast = "(const char**)"
            #else
                #set $cast = ""
            #end if
${indent}$a.name = ${cast}s_$a.name;

${indent}for (index0 = ${a.name}Elements - 1; index0 > 0; index0--) {
    ${indent}${a.name}[index0] = ${a.name}[index0 - 1];
${indent}}

            #if $s == 's' or $s == 'o' or $s == 'g' or $s == '(' or $s == '{'
${indent}${a.name}[0] = temp_$a.name;
            #end if
        #elif $s == 'v'
${indent}if (s_${a.name}_int % 2) {
\#ifdef _WINDOWS_
${indent}    _snprintf_s(stringBuffer$a.name, sizeof${a.name}, _TRUNCATE, "Variant arg #%d.", s_${a.name}_int);
\#else
${indent}    snprintf(stringBuffer$a.name, sizeof${a.name}, "Variant arg #%d.", s_${a.name}_int);
\#endif
${indent}    AJ_InitArg(&$a.name, AJ_ARG_STRING, 0, stringBuffer$a.name, 0);
${indent}    ${a.name}.sigPtr = "s";
${indent}} else {
${indent}    static int temp;

${indent}    temp = s_${a.name}_int;
${indent}    AJ_InitArg(&$a.name, AJ_ARG_INT32, 0, &temp, 0);
${indent}    ${a.name}.sigPtr = "i";
${indent}}

        #end if
$CommonCheetah.increment_arg($indent_count, $complete_name, $a)#slurp
    #end for
#end def
#####################
## Define static version of the argument(s) for runnable code. This is used by
## ServiceIface, ClientDoWork, and ServiceDoWork. See those files for more context.
#####################
#@staticmethod
#def define_static_args($args, $indent_count)
    #set $indent = $indent_count * " "
${indent}/* Define the static version of the arg(s). */
$CommonCheetah.define_static_structure_variants($args, $indent_count)#slurp
    #for $a in $args
        #set $t = $GenTL.get_base_c_type($a.interface, $a.arg_type)
        #set $ptrs = $a.get_indirection_level() * "*"
        #if $a.arg_type in ('s', 'g', 'o')
${indent}static int32_t s_helloNumber$a.name = 0;
        #end if
        #if $a.arg_type == 'v'
${indent}static int s_${a.name}_int = 0;    /* Variant int value. */
${indent}char stringBuffer${a.name}[30];    /* Variant string value derived from the int value. */
${indent}const size_t sizeof${a.name} = ArraySize(stringBuffer$a.name);
            #continue
        #end if
        #set $init = $GenTL.get_initialization($a, indent_count)
        #if $a.is_array()
            #set $array_variant_data = $GenTL.get_array_container_variant_data($a)
            #for $avd in $array_variant_data
${indent}$avd
            #end for
${indent}static $t s_$a.name$init;
            #set $s = $a.get_base_signature()[0]
            #if $s == 's' or $s == 'o' or $s == 'g' or $s == '(' or $s == '{'
${indent}$t temp_$a.name = s_${a.name}[ArraySize(s_${a.name}) - 1];
            #end if
        #else
## A static string is not used. The string arg is created using the static int s_helloNumber$a.name
            #if $t != "char*"
${indent}static $t s_$a.name$init;
            #end if
        #end if
    #end for
#end def
######################
## Define a collection of arguments.
######################
#@staticmethod
#def define_arguments($args, $indent_count, $free_list)
    #set $indent = $indent_count * " "
    #if $args is not None
        #for $a in $args
            #set $init_val = "0"
            #set $const = ""
            #set $t = $GenTL.get_base_c_type($a.interface, $a.arg_type)
            #set $ptrs = $a.get_indirection_level() * "*"
            #if $a.is_array()
                #set $init_val = "NULL"
                #if $t == "char*"
                    #set $const = "const "
                #end if
${indent}int ${a.name}Elements = 0;
            #elif $a.is_structure() or $t == "AJ_Arg"
                #set $init_val = "{ 0 }"
            #elif $free_list != None and $t == "char*"
${indent}const size_t sizeof${a.name} = 128;
                #set $buffer_name = "stringBuffer{0}".format($a.name)
${indent}char* $buffer_name = (char*)AJ_Malloc(sizeof${a.name});
$free_list.append($buffer_name)#slurp
            #end if
$indent$const$t$ptrs $a.name = $init_val;
        #end for
    #end if
#end def
######################
## Unmarshal these arguments.
######################
#@staticmethod
#def unmarshal_arguments($comp_type, $runnable, $arginfo, $indent_count, $is_client_side)
    #set $indent = $indent_count * " "
    #if $arginfo is not None and len($arginfo.args) > 0
        #if $comp_type == "prop" and $is_client_side
${indent}const char* sig;

${indent}/* The signature is not used except with a variant property type but the call must be made. */
${indent}ajcgStatus = AJ_UnmarshalVariant(ajcgMsg, &sig);

$CommonCheetah.handle_error($runnable, "AJ_UnmarshalVariant", $indent_count)
        #end if
        #if $arginfo.is_basic_types()

${indent}ajcgStatus = AJ_UnmarshalArgs(ajcgMsg, "$arginfo.signature"#slurp
            #for $a in $arginfo.args
, &$a.name#slurp
            #end for
);

$CommonCheetah.handle_error($runnable, "AJ_UnmarshalArgs", $indent_count)#slurp
        #else
            #for $a in $arginfo.args

$CommonCheetah.unmarshal_one_argument($a, $runnable, $indent_count)#slurp
            #end for
        #end if
    #end if
#end def
######################
## Unmarshal this one argument.
######################
#@staticmethod
#def unmarshal_one_argument($arg, $runnable, $indent_count)
    #set $indent = $indent_count * " "
    #set $free_list = []
    #set $index = 0
    #if $arg.is_array()
        #set $indirection_level = $arg.get_indirection_level()
        #set $basesig = $arg.get_base_signature()
        #set $openclosecount = $indirection_level - 1
        #if $basesig in ('s', 'o', 'g') or $arg.is_structure() or $arg.is_dictionary()
            #set $openclosecount  = $indirection_level
        #end if
        ## unmarshal the array openers
        #for $index in $range($openclosecount)
${indent}ajcgStatus = AJ_UnmarshalContainer(ajcgMsg, &array$index, AJ_ARG_ARRAY);

$CommonCheetah.handle_error($runnable, "AJ_UnmarshalContainer", $indent_count)
${indent}${arg.name}Elements = 0;
        #end for
        ## unmarshal the array elements
        #if $basesig in ('s', 'o', 'g')
$CommonCheetah.unmarshal_string_array($runnable, $arg.name, $basesig, $free_list, $indirection_level - 1, $indent_count)#slurp
        #elif $arg.is_structure() or $arg.is_dictionary()
            #set $containerdef = $arg.get_named_type()
$CommonCheetah.unmarshal_container_array($runnable, $arg.name, $containerdef, $free_list, "ajcgMsg", $indirection_level - 1, $indent_count)#slurp
        #else
            ##basic scalar arrays are handled here
            #set $depth = $indirection_level - 1
${indent}ajcgStatus = AJ_UnmarshalArg(ajcgMsg, &array$depth);

$CommonCheetah.handle_error($runnable, "AJ_UnmarshalArg", $indent_count, $free_list)
$indent$arg.name = array${depth}.val.$GenTL.val_dictionary[$basesig];
$indent${arg.name}Elements = array${depth}.len / sizeof(*$arg.name);
            #if not $runnable
${indent}AJCG_NO_UNUSED_WARNING(${arg.name}Elements);
            #end if
        #end if
        ## unmarshal the array closers
        #for $index in $reversed($range($openclosecount))
${indent}ajcgStatus = AJ_UnmarshalCloseContainer(ajcgMsg, &array$index);

$CommonCheetah.handle_error($runnable, "AJ_UnmarshalCloseContainer", $indent_count, $free_list)#slurp
        #end while
    #else
        #if $arg.is_structure()
            ## no need to check for dictionaries here, as they are by definition also arrays
            ## and hence handled above
            #set $containerdef = $arg.get_named_type()
$CommonCheetah.unmarshal_container($runnable, $arg.name, $containerdef, "ajcgMsg", 0, $indent_count, False, $free_list)#slurp
        #elif $arg.arg_type == 'v'
${indent}ajcgStatus = AJ_UnmarshalVariant(ajcgMsg, &${arg.name}.sigPtr);

$CommonCheetah.handle_error($runnable, "AJ_MarshalVariant", $indent_count)
            #if $runnable
${indent}/* Figure out which data type the variant is. */
${indent}switch (${arg.name}.sigPtr[0]) {
${indent}case 's':
${indent}    {
${indent}        ${arg.name}.val.v_data = &${arg.name}.val.v_string;
${indent}        ${arg.name}.typeId = 's';
${indent}        break;
${indent}    }

${indent}case 'i':
${indent}    {
${indent}        static int32_t variantIntBuffer;

${indent}        ${arg.name}.val.v_int32 = &variantIntBuffer;
${indent}        ${arg.name}.typeId = 'i';
${indent}        break;
${indent}    }

${indent}case 'y':
${indent}    {
${indent}        static uint8_t variantByteBuffer;

${indent}        ${arg.name}.val.v_byte = &variantByteBuffer;
${indent}        ${arg.name}.typeId = 'y';
${indent}        break;
${indent}    }

${indent}default: /* Unexpected variant type. */
${indent}    AJ_AlwaysPrintf(("%s:%d - Unexpected variant type '%c'\n", __FILE__, __LINE__, ${arg.name}.sigPtr[0]));
${indent}    exit(-1);
${indent}}

${indent}ajcgStatus = AJ_UnmarshalArgs(ajcgMsg, ${arg.name}.sigPtr, ${arg.name}.val.v_data);

$CommonCheetah.handle_error($runnable, "AJ_MarshalArg", $indent_count)#slurp
            #else
${indent}/* TODO: Unmarshal your variant value with code something like:
${indent}   if (${arg.name}.sigPtr[0] == 's') {
${indent}      ajcgStatus = AJ_UnmarshalArgs(ajcgMsg, ${arg.name}.sigPtr, &myStringValue);
${indent}   } else {
${indent}      ajcgStatus = AJ_UnmarshalArgs(ajcgMsg, ${arg.name}.sigPtr, &myIntValue);
${indent}   }
${indent} */
            #end if
        #else
${indent}ajcgStatus = AJ_UnmarshalArgs(ajcgMsg, "$arg.arg_type", &$arg.name);

$CommonCheetah.handle_error($runnable, "AJ_UnmarshalArgs", $indent_count, $free_list)#slurp
        #end if
    #end if
#end def
#####################
## Unmarshal an array of strings.
#####################
#@staticmethod
#def unmarshal_string_array($runnable, $name, $sig, $free_list, $depth, $indent_count)
    #set $indent = $indent_count * " "
${indent}index$depth = 0;

${indent}while (TRUE) {
${indent}    ${name} = AJ_Realloc((void*)${name}, ++${name}Elements * sizeof(${name}[0]));
$free_list.append($name)#slurp
    #set $struct_name = "{0}[index{1}]".format($name, $depth)
${indent}    ajcgStatus = AJ_UnmarshalArgs(ajcgMsg, "$sig", &${name}[index$depth]);

${indent}    if (AJ_ERR_NO_MORE == ajcgStatus) {
${indent}        break;
${indent}    }

$CommonCheetah.handle_error($runnable, "AJ_UnmarshalArgs", $indent_count + 4, $free_list)
${indent}    index$depth++;
${indent}}

${indent}${name} = AJ_Realloc((void*)${name}, --${name}Elements * sizeof(${name}[0]));
#end def
#####################
## Unmarshal an array of structures.
#####################
#@staticmethod
#def unmarshal_container_array($runnable, $name, $sig, $free_list, $msg_ptr, $depth, $indent_count)
    #set $indent = $indent_count * " "
${indent}index$depth = 0;
${indent}while (TRUE) {
${indent}    ${name} = AJ_Realloc((void*)${name}, ++${name}Elements * sizeof(${name}[0]));
$free_list.append($name)#slurp
    #set $struct_name = "{0}[index{1}]".format($name, $depth)
$CommonCheetah.unmarshal_container($runnable, $struct_name, $sig, $msg_ptr, $depth, $indent_count + 4, True, $free_list)
${indent}    index$depth++;
${indent}}

${indent}${name} = AJ_Realloc((void*)${name}, --${name}Elements * sizeof(${name}[0]));
#end def
#####################
## Unmarshal a container and its contents.
#####################
#@staticmethod
#def unmarshal_container($runnable, $name, $container, $msg_ptr, $depth, $indent_count, $is_array, $free_list = [])
    #set $indent = $indent_count * " "
    #assert($isinstance($container, $structdef.StructDef) or $isinstance($container, $dictdef.DictDef)) 
    #set $isstruct = $isinstance($container, $structdef.StructDef)
    #if $isstruct
${indent}ajcgStatus = AJ_UnmarshalContainer($msg_ptr, &struct$depth, AJ_ARG_STRUCT);
    #else
${indent}ajcgStatus = AJ_UnmarshalContainer($msg_ptr, &dictionary$depth, AJ_ARG_DICT_ENTRY);
    #end if

    #if $is_array
${indent}if (AJ_ERR_NO_MORE == ajcgStatus) {
${indent}    break;
${indent}}

    #end if
$CommonCheetah.handle_error($runnable, "AJ_UnmarshalContainer", $indent_count, $free_list)
    #set $member_num = 0
    #set $index = 1
    #while $sig[$index] != ')' and $sig[$index] != '}'
        #set $subArgSig = $argdef.get_next_marshal_args_signature($sig, $index)
        #set $end_basic = $argdef.find_end_of_basic_types($subArgSig)
        #if $end_basic == 0
            #set $subArgName = "{0}.member{1}".format($name, $member_num)
            #set $subArg = $argdef.ArgDef(None, $subArgName, $subArgSig, "in")
$CommonCheetah.unmarshal_one_argument($subArg, $runnable, $indent_count)
            #set $index += len($subArgSig)
            #set $member_num += 1
        #else
            #set $subIndex = 0
${indent}status = AJ_UnmarshalArgs($msg_ptr, "$subArgSig"#slurp
            #while $subIndex < $end_basic
, &${name}.member$member_num#slurp
                #set $member_num += 1
                #set $subIndex += 1
            #end while
            #set $basicfields = $fieldlist[$index:$end_basic_type_index]
            #set $marshal_sig = "".join([x.get_flattened_signature() for x in $basicfields])
            #set $marshal_args = ", ".join(["&{0}.{1}".format($name, x.name) for x in $basicfields])
${indent}ajcgStatus = AJ_UnmarshalArgs($msg_ptr, "$marshal_sig", $marshal_args);
$CommonCheetah.handle_error($runnable, "AJ_UnmarshalArgs", $indent_count, $free_list)
            #set $index = $end_basic_type_index
        #else
            #set $fakemember = $memberdef.MemberDef($name+"."+$f.name, $f.arg_type)
            #set $fakemember.interface = $f.interface
$CommonCheetah.unmarshal_one_argument($fakemember, $runnable, $indent_count)#slurp
            #set $index += 1
        #end if
    #end while
    #if $isstruct
${indent}ajcgStatus = AJ_UnmarshalCloseContainer($msg_ptr, &struct$depth);
    #else
${indent}ajcgStatus = AJ_UnmarshalCloseContainer($msg_ptr, &dictionary$depth);
    #end if

$CommonCheetah.handle_error($runnable, "AJ_UnmarshalCloseContainer", $indent_count, $free_list)#slurp
#end def
######################
## Marshal these arguments.
######################
#@staticmethod
#def marshal_arguments($runnable, $arginfo, $msg_ptr, $indent_count)
    #if $arginfo is not None and len($arginfo.args) > 0
        #set $indent = $indent_count * " "
        #if $arginfo.is_basic_types()
${indent}ajcgStatus = AJ_MarshalArgs($msg_ptr, "$arginfo.signature"#slurp
            #for $a in $arginfo.args
, $a.name#slurp
            #end for
);

$CommonCheetah.handle_error($runnable, "AJ_MarshalArgs", $indent_count)#slurp
        #else
            #for $a in $arginfo.args
$CommonCheetah.marshal_one_argument($runnable, $a, $msg_ptr, $indent_count)#slurp
            #end for
        #end if
    #end if
#end def
######################
## Marshal this one argument.
######################
#@staticmethod
#def marshal_one_argument($runnable, $arg, $msg_ptr, $indent_count)
    #set $indent = $indent_count * " "
    #set $index = 0
    #if $arg.is_array()
${indent}/* Marshal array at depth $index. */
${indent}ajcgStatus = AJ_MarshalContainer($msg_ptr, &array$index, AJ_ARG_ARRAY);

$CommonCheetah.handle_error($runnable, "AJ_MarshalContainer", $indent_count)
                #set $index += 1
            #end if
        #end while
        #if $t == 's' or $t == 'o' or $t == 'g'
$CommonCheetah.marshal_string_array($runnable, $arg.name, $msg_ptr, $t, $index - 1, $indent_count)#slurp
        #elif $t == '(' or $t == '{'
            #set $sig = $arg.get_container(index)
$CommonCheetah.marshal_container_array($runnable, $arg.name, $sig, $msg_ptr, $index - 1, $indent_count)#slurp
        #else
            ##basic scalar arrays are handled here
            #set $depth = $indirection_level - 1
${indent}/* Marshal array at depth $depth. */
${indent}AJ_InitArg(&array$depth, '$basesig', AJ_ARRAY_FLAG, $arg.name, ${arg.name}Elements * sizeof(*$arg.name));
${indent}ajcgStatus = AJ_MarshalArg($msg_ptr, &array$depth);

$CommonCheetah.handle_error($runnable, "AJ_MarshalArg", $indent_count)
        #end if

        #while $index > 0
            #set $index -= 1
${indent}/* Close array at depth $index. */
${indent}ajcgStatus = AJ_MarshalCloseContainer($msg_ptr, &array$index);

$CommonCheetah.handle_error($runnable, "AJ_MarshalCloseContainer", $indent_count)#slurp
        #end while
    #else
        #set $sig = $arg.arg_type
        #if $arg.is_structure()
            ## no need to check for dictionaries here, as they are by definition also arrays
            ## and hence handled above
            #set $containerdef = $arg.get_named_type()
$CommonCheetah.marshal_container($runnable, $arg.name, $containerdef, $msg_ptr, 0, $indent_count)#slurp
        #elif $arg.arg_type == 'v'
${indent}ajcgStatus = AJ_MarshalVariant($msg_ptr, ${arg.name}.sigPtr);

$CommonCheetah.handle_error($runnable, "AJ_MarshalVariant", $indent_count)
            #if $runnable
${indent}if (${arg.name}.typeId == AJ_ARG_STRING) {
${indent}    ajcgStatus = AJ_MarshalArgs($msg_ptr, ${arg.name}.sigPtr, ${arg.name}.val.v_string);
${indent}} else { /* We know that only strings and integers are sent so it must be an int. */
${indent}    ajcgStatus = AJ_MarshalArgs($msg_ptr, ${arg.name}.sigPtr, *${arg.name}.val.v_int32);
${indent}}

$CommonCheetah.handle_error($runnable, "AJ_MarshalArg", $indent_count)#slurp
            #else
${indent}/* TODO: Marshal your variant value with code something like:
${indent}   ajcgStatus = AJ_MarshalArgs($msg_ptr, ${arg.name}.sigPtr, *${arg.name}.val.v_int32);
${indent} */
            #end if
        #else
${indent}ajcgStatus = AJ_MarshalArgs($msg_ptr, "$arg.arg_type", $arg.name);

$CommonCheetah.handle_error($runnable, "AJ_MarshalArgs", $indent_count)#slurp
        #end if
    #end if
#end def
#####################
## Marshal an array of strings or object pathes.
#####################
#@staticmethod
#def marshal_string_array($runnable, $name, $msg_ptr, $t, $depth, $indent_count)
    #set $indent = $indent_count * " "
${indent}for (index$depth = 0; index$depth < ${name}Elements; index$depth++) {
${indent}    ajcgStatus = AJ_MarshalArgs($msg_ptr, "$t", ${name}[index$depth]);

$CommonCheetah.handle_error($runnable, "AJ_MarshalArgs", $indent_count + 4)#slurp
${indent}}
#end def
#####################
## Marshal an array of structures or dictionaries.
#####################
#@staticmethod
#def marshal_container_array($runnable, $name, $sig, $msg_ptr, $depth, $indent_count)
    #set $indent = $indent_count * " "
${indent}for (index$depth = 0; index$depth < ${name}Elements; index$depth++) {
    #set $struct_name = "{0}[index{1}]".format($name, $depth)
$CommonCheetah.marshal_container($runnable, $struct_name, $sig, $msg_ptr, $depth, $indent_count + 4)#slurp
${indent}}
#end def
#####################
## Marshal a container and its contents.
#####################
#@staticmethod
#def marshal_container($runnable, $name, $sig, $msg_ptr, $depth, $indent_count)
    #set $indent = $indent_count * " "
    #assert($isinstance($container, $structdef.StructDef) or $isinstance($container, $dictdef.DictDef)) 
    #set $isstruct = $isinstance($container, $structdef.StructDef)
    #if $isstruct
${indent}ajcgStatus = AJ_MarshalContainer($msg_ptr, &struct$depth, AJ_ARG_STRUCT);
    #else
${indent}ajcgStatus = AJ_MarshalContainer($msg_ptr, &dictionary$depth, AJ_ARG_DICT_ENTRY);
    #end if

$CommonCheetah.handle_error($runnable, "AJ_MarshalContainer", $indent_count)
    #set $member_num = 0
    #set $index = 1
    #while $sig[$index] != ')' and $sig[$index] != '}'
        #set $subArgSig = $argdef.get_next_marshal_args_signature($sig, $index)
        #set $end_basic = $argdef.find_end_of_basic_types($subArgSig)
        #set $end_basic = $argdef.find_end_of_basic_types($subArgSig)
        #if $end_basic == 0
            #set $subArgName = "{0}.member{1}".format($name, $member_num)
            #set $subArg = $argdef.ArgDef(None, $subArgName, $subArgSig, "in")
$CommonCheetah.marshal_one_argument($runnable, $subArg, $msg_ptr, $indent_count)
            #set $index += len($subArgSig)
            #set $member_num += 1
        #else
            #set $subIndex = 0
${indent}status = AJ_MarshalArgs($msg_ptr, "$subArgSig"#slurp
            #while $subIndex < $end_basic
, ${name}.member$member_num#slurp
                #set $member_num += 1
                #set $subIndex += 1
            #end while
            #set $basicfields = $fieldlist[$index:$end_basic_type_index]
            #set $marshal_sig = "".join([x.get_flattened_signature() for x in $basicfields])
            #set $marshal_args = ", ".join(["{0}.{1}".format($name, x.name) for x in $basicfields])
${indent}ajcgStatus = AJ_MarshalArgs($msg_ptr, "$marshal_sig", $marshal_args);

$CommonCheetah.handle_error($runnable, "AJ_MarshalArgs", $indent_count)
        #end if
    #end while
    #if $isstruct
${indent}ajcgStatus = AJ_MarshalCloseContainer($msg_ptr, &struct$depth);
    #else
${indent}ajcgStatus = AJ_MarshalCloseContainer($msg_ptr, &dictionary$depth);
    #end if

$CommonCheetah.handle_error($runnable, "AJ_MarshalCloseContainer", $indent_count)#slurp
#end def
#####################
## Print the values received from the various arguments.
#####################
#@staticmethod
#def print_args($args, $indent_count)
    #set $indent = $indent_count * " "
    #for $a in $args
        #if $a.is_array()
${indent}for (index0 = 0; index0 < ${a.name}Elements; index0++) {
$CommonCheetah.print_one_arg($a, $indent_count + 4)#slurp
${indent}}
        #else
$CommonCheetah.print_one_arg($a, $indent_count)
        #end if
    #end for
#end def
#####################
## Print the value from one argument.
#####################
#@staticmethod
#def print_one_arg($arg, $indent_count)
    #set indent = $indent_count * " "
    #set $base_sig = $arg.get_base_signature()
    #if $arg.is_array()
        #set $is_multi_dimensional = (len($base_sig) - len($arg.arg_type)) > 1
        #if $is_multi_dimensional
${indent}/*******
${indent} * Multi-dimension arrays are not fully supported in "Runnable" mode
${indent} * by the code generator at this time.
${indent} */
        #elif $arg.is_structure() or $arg.is_dictionary()
            #set $member = $GenTL.get_scaler_member($base_sig)
            #if $member is not None
                #set $t = $GenTL.printf_dictionary[$member[1]]
                #set $m_name = $member[0]
${indent}AJ_AlwaysPrintf(("\tReceived '${arg.name}[%d].$m_name' = $t.\n", index0, ${arg.name}[index0].$m_name));
            #else
${indent}/*******
${indent} * TODO: Make a change in '$arg.name'.
${indent} * Some nested structures and structures without scalar members are not
${indent} * fully supported in "Runnable" mode by the code generator at this time.
${indent} */
            #end if
        #else
            #set $t = $GenTL.printf_dictionary[$arg.get_flattened_base_signature()]
${indent}AJ_AlwaysPrintf(("\tReceived '${arg.name}[%d]' = $t.\n", index0, ${arg.name}[index0]));
        #end if
    #elif $arg.is_structure()
        #set $member = $GenTL.get_scaler_member($arg.arg_type)
        #if $member is not None
            #set $t = $GenTL.printf_dictionary[$member[1]]
            #set $m_name = $member[0]
            #if $t == 'v'

${indent}if (${arg.name}.${m_name}.typeId == 's') {
${indent}AJ_AlwaysPrintf(("\tReceived variant string '${arg.name}.$m_name' = '%s'.\n", ${arg.name}.${m_name}.val.v_string));
${indent}} else {
${indent}AJ_AlwaysPrintf(("\tReceived variant int '${arg.name}.$m_name' = %d.\n", *${arg.name}.${m_name}.val.v_int32));
${indent}}
            #else
${indent}AJ_AlwaysPrintf(("\tReceived '${arg.name}.$m_name' = $t.\n", ${arg.name}.$m_name));
            #end if
        #else
${indent}/*******
${indent} * TODO: Make a change in '$arg.name'.
${indent} * Some nested structures and structures without scalar members are not
${indent} * fully supported in "Runnable" mode by the code generator at this time.
${indent} */
        #end if
    #else
        #set $t = $GenTL.printf_dictionary[$arg.arg_type]
            #if $t == 'v'

${indent}if (${arg.name}.typeId == 's') {
${indent}    AJ_AlwaysPrintf(("\tReceived variant string '$arg.name' = '%s'.\n", ${arg.name}.val.v_string));
${indent}} else {
${indent}    AJ_AlwaysPrintf(("\tReceived variant int '$arg.name' = %d.\n", *${arg.name}.val.v_int32));
${indent}}
        #else
${indent}AJ_AlwaysPrintf(("\tReceived '$arg.name' = $t.\n", $arg.name));
        #end if
    #end if
#end def
#####################
## Define the containers (structures and dictionaries) in this interface.
#####################
#@staticmethod
#def define_containers($interface)
    #set $structures = $interface.get_structs_in_struct_order()
    #for $s in $structures
        #if $s.signature[0] == '('
struct $s.name {
        #else
struct $s.name /*dictionary*/ {
        #end if
        #set $members = $GenTL.make_members_from_signature($interface, $s.signature)
        #for $m in $members
    $m
        #end for
};
    #end for
#end def
#####################
## "Increment" this one "incrementable".
#####################
#@staticmethod
#def increment_object($indent, $name, $element0, $sig, $complete_name, $arg)
    #if $sig == 'd'
${indent}s_$name$element0 += 0.1;
        #if not $arg.is_array
${indent}$name = s_$name;
        #end if
    #elif $sig == 'v'
${indent}++s_${name}_int$element0;
    #elif $sig == 'b'
${indent}s_$name$element0 = !s_$name$element0;
        #if not $arg.is_array
${indent}$name = s_$name;
        #end if
## Arrays of strings are handled differently.
    #elif ($sig == 's' or $sig == 'o' or $sig == 'g') and not $arg.is_array
        #if $sig == 'o'
\#ifdef _WINDOWS_
${indent}_snprintf_s(stringBuffer$arg.name, sizeof${arg.name}, _TRUNCATE, "/object/path/test%d", ++s_helloNumber$arg.name);
\#else
${indent}snprintf(stringBuffer$arg.name, sizeof${arg.name}, "/object/path/test%d", ++s_helloNumber$arg.name);
\#endif
${indent}$arg.name = stringBuffer$arg.name;
        #elif $sig == 'g'
\#ifdef _WINDOWS_
${indent}_snprintf_s(stringBuffer$arg.name, sizeof${arg.name}, _TRUNCATE, "(sig%c)", 's' + (s_helloNumber$arg.name++ % 3));
\#else
${indent}snprintf(stringBuffer$arg.name, sizeof${arg.name}, "(sig%c)", 's' + (s_helloNumber$arg.name++ % 3));
\#endif
${indent}$arg.name = stringBuffer$arg.name;
        #else
\#ifdef _WINDOWS_
${indent}_snprintf_s(stringBuffer$arg.name, sizeof${arg.name}, _TRUNCATE, "Hello # %d from '$complete_name'.\n", ++s_helloNumber$arg.name);
\#else
${indent}snprintf(stringBuffer$arg.name, sizeof${arg.name}, "Hello # %d from '$complete_name'.\n", ++s_helloNumber$arg.name);
\#endif
${indent}$arg.name = stringBuffer$arg.name;
        #end if
    #else
        #if $arg.is_array
            #if $sig != 's' and $sig != 'o' and $sig != 'g'
${indent}s_$name$element0++;
            #end if
        #else
${indent}$name$element0 = ++s_$name$element0;
        #end if
    #end if
#end def
#####################
## "Increment" this argument for the "runnable" version of the program.
#####################
#@staticmethod
#def increment_arg($indent_count, $complete_name, $arg)
        #if $arg.is_array()
            #set $element0 = "[0]"
        #else
            #set $element0 = ""
        #end if
        #set $indent = " " * $indent_count
        #set $sig = $arg.get_base_signature()
        #if $arg.is_structure() or $arg.is_dictionary()
            #if not $arg.is_array()
${indent}$arg.name = s_$arg.name;
            #end if
            #set $scaler_member = $GenTL.get_scaler_member($sig)
            #if $scaler_member is None
${indent}/*******
${indent} * TODO: Make a change in '$arg.name'.
${indent} * Some nested structures and structures without scalar members are not
${indent} * fully supported in "Runnable" mode by the code generator at this time.
${indent} */
            #else
                #set $scaler_name = $scaler_member[0]
                #set $scaler_type = $scaler_member[1]
                #set $name = "{0}{1}.{2}".format($arg.name, $element0, $scaler_name)
$CommonCheetah.increment_object($indent, $name, "", $scaler_type, $complete_name, $arg)#slurp
            #end if
        #else
$CommonCheetah.increment_object($indent, $arg.name, $element0, $sig, $complete_name, $arg)#slurp
        #end if
#end def
#####################
## Define the arrays and structures needed for this interface component.
## If input is true then define them for the input.
## If output is true then define them for the output.
## If both is true then define a number that will handle either.
#####################
#@staticmethod
#def define_arrays_and_structures($print_arrays, $c, $input = True, $output = True)
    #set $in_arrays = 0
    #set $out_arrays = 0
    #set $in_arrays_indices = 0
    #set $out_arrays_indices = 0
    #set $in_structs = 0
    #set $out_structs = 0
    #set $in_dictionaries = 0
    #set $out_dictionaries = 0
    #if $input
        #set $in_arrays = $c.input_arg_info.max_number_of_array_dimensions()
        #set $in_arrays_indices = $c.input_arg_info.max_number_of_array_indices_needed($print_arrays)
        #set $in_structs = $c.input_arg_info.get_max_structure_depth()
        #set $in_dictionaries = $c.input_arg_info.get_max_dictionary_depth()
    #end if
    #if $output
        #set $out_arrays = $c.output_arg_info.max_number_of_array_dimensions()
        #set $out_arrays_indices = $c.output_arg_info.max_number_of_array_indices_needed($print_arrays)
        #set $out_structs = $c.output_arg_info.get_max_structure_depth()
        #set $out_dictionaries = $c.output_arg_info.get_max_dictionary_depth()
    #end if
    #set $number_of_arrays = max($in_arrays, $out_arrays)
    #for $array_num in $range($number_of_arrays)
    AJ_Arg array$array_num;
    #end for
    #set $number_of_array_indices = max($in_arrays_indices, $out_arrays_indices)
    #for $array_index_num in $range($number_of_array_indices)
    int index$array_index_num = 0;
    #end for
    #set $number_of_structs = max($in_structs, $out_structs)
    #for $struct_num in $range($number_of_structs)
    AJ_Arg struct$struct_num;
    #end for
    #set $number_of_dictionary = max($in_dictionaries, $out_dictionaries)
    #for $dictionary_num in $range($number_of_dictionary)
    AJ_Arg dictionary$dictionary_num;
    #end for
#end def
#####################
## Call AJ_Free() on any arrays in this arg info that need to be freed and set the
## pointer to NULL.
#####################
#@staticmethod
#def free_and_null_arrays($arg_info)
    #if $arg_info is not None and len($arg_info.args) > 0
        #for $a in $arg_info.args
            #set $index = 0
            #if $a.arg_type[$index] == 'a'
                #set $t = $a.arg_type[$index + 1]
                #if not ($t != 'a' and $t != 's' and $t != 'o' and $t != 'g' and $t != '(' and $t != '{')
                    #while $a.arg_type[$index] == 'a'
## TODO: This should be freeing different arrays in the multi-dimension case.
    AJ_Free((void*)$a.name);
    $a.name = NULL;
                        #set $index += 1
                    #end while

                #end if
            #end if
        #end for
    #end if
#end def
