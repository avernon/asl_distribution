###############################################################################
## Copyright (c) 2013 AllSeen Alliance. All rights reserved.
##
## Contributed by Qualcomm Connected Experiences, Inc.,
## with authorization from the AllSeen Alliance, Inc.
## 
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
## 
##     http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## 
## Pursuant to Section 1 of the License, the work of authorship constituting
## a Work and any Contribution incorporated in the Work shall mean only that
## Contributor's code submissions authored by that Contributor.  Any rights
## granted under the License are conditioned upon acceptance of these
## clarifications.
###############################################################################
#import GenTL
#import CommonCheetah as cc
/* Source: "$command_line.xml_input_file" */

/**
 * Per-module definition of the current module for debug logging. Must be defined
 * prior to first inclusion of aj_debug.h
 */
\#define AJ_MODULE CLIENTDOWORK

\#include "Client.h"

/**
 * Turn on per-module debug printing by setting this variable to non-zero value
 * (usually in debugger).
 */
uint8_t dbgCLIENTDOWORK = 1;

/*
 * Let the application do some work.
 *
 * This function is called if there are no messages to unmarshal.
 */
void ClientAppDoWork(AJ_BusAttachment* bus, uint32_t sessionId)
{
#if $command_line.runnable
    #set $number_of_components = 0
    #for $key in $sorted($service.interfaces)
        #set $interface = $service.interfaces[$key]
        #for $o in $interface.parents
            #set $iface_index = $o.get_interface_index($interface)
            #set $comp = $GenTL.get_interface_components($interface, $o, $iface_index, True)
            #for $c in $comp:
                #if $c.comp_type != "sig"
                    #set $number_of_components += 1
                #end if
            #end for
        #end for
    #end for
    #if $number_of_components > 0
    $GenTL.comment_start_runnable

    /* Only a small number of messages can be queued up before returning
     * control to AllJoyn so it can send them out and receive messages.
     * So for demonstration purposes we "take turns" sending messages to
     * each of the services available. */
    const int numberOfComponents = $number_of_components;
    static int s_turn = 0;

    #set $component = 0
    #for $key in $sorted($service.interfaces)
        #set $interface = $service.interfaces[$key]
        #for $o in $interface.parents
            #set $iface_index = $o.get_interface_index($interface)
            #set $comp = $GenTL.get_interface_components($interface, $o, $iface_index, True)
            #for $c in $comp
                #if $c.comp_type == "sig"
                    #continue
                #end if
                #set $complete_name = $GenTL.get_complete_name($o, $interface, $c)
    if ($component == s_turn) {
                #if $c.comp_type == "meth"
$do_method_turn($complete_name, $c)#slurp
                #else
                    #assert($c.comp_type) == "prop"
$do_property_turn($complete_name, $c)#slurp
                #end if
    }
                #set $component += 1

            #end for
        #end for
    #end for
    if (++s_turn >= numberOfComponents) {
        s_turn = 0;
    }

    $GenTL.comment_end_runnable
    #end if
#else
    /* TODO: Add stuff for client to do while waiting for a message. */

    AJ_AlwaysPrintf(("ClientAppDoWork()\n"));
#end if
}

/*
 * Handler for AJ_SIGNAL_SESSION_LOST_WITH_REASON. Returns AJ_ERR_READ to indicate a disconnect
 * should be done.
 */
AJ_Status SessionLost(AJ_Message* ajcgMsg)
{
    AJ_Status ajcgStatus = AJ_ERR_READ;

    /* TODO: Resource clean up or other things that need to be done upon session lost. */

    return ajcgStatus;
}
#####################
## Generate the code for doing a single "turn" of a method.
#####################
#def $do_method_turn($complete_name, $c)
    #set $free_list = []
    #if $c.input_arg_info is not None
        #set $input_args = $c.input_arg_info.args
        #if len($input_args) <= 0
            #set $input_args = None
        #end if
    #else
        #set $input_args = None
    #end if
    #if $input_args is not None
$cc.CommonCheetah.define_static_args($input_args, 8)
        /* Define the input args. */
$cc.CommonCheetah.define_arguments($input_args, 8, $free_list)
    #end if
        /* Miscellaneous local variables. */
        AJ_Status ajcgStatus;
    #if $c.has_array(True)
        int index0 = 0;
    #end if

    #if $input_args is not None
$cc.CommonCheetah.initialize_args($input_args, $complete_name, 8)
    #end if
$do_method_call($complete_name, $c, $input_args, $free_list)#slurp
#end def
#####################
## Generate the code for a method call.
#####################
#def $do_method_call($complete_name, $c, $input_args, $free_list)
        AJ_AlwaysPrintf(("Calling '$complete_name'.\n"));
        #if $input_args is not None
        ajcgStatus = ${c.name}_Caller(bus, sessionId#slurp
            #for $a in $input_args
, $a.name#slurp
                #if $a.is_array()
, ${a.name}Elements#slurp
                #end if
            #end for
);
        #else
        ajcgStatus = ${c.name}_Caller(bus, sessionId);
        #end if
        #if len(free_list) > 0

            #for $f in $free_list
        AJ_Free((void*)$f);
        $f = NULL;
            #end for
        #end if

        if (AJ_OK != ajcgStatus) {
            const char* statusText = AJ_StatusText(ajcgStatus);

            AJ_AlwaysPrintf(("Calling '$complete_name' failed with status code 0x%x (%s).\n", ajcgStatus, statusText));
        }
#end def
#####################
## Generate the code for doing a single "turn" of a property.
#####################
#def $do_property_turn($complete_name, $c)
    #set $free_list = []
    #set $indent_count = 8
    #set $indent = $indent_count * " "
${indent}AJ_Status ajcgStatus;
    #set $input_args = $c.input_arg_info.args
    #set $output_args = $c.output_arg_info.args
    #set $is_get_set = False
    #if len($input_args) > 0
        #if len($output_args) > 0
            #set $is_get_set = True
${indent}static int s_doGet = FALSE;

        #end if
    #end if
    #if len($input_args) > 0
        #if $is_get_set
${indent}s_doGet = !s_doGet;

${indent}if (s_doGet) {
$do_property_call($complete_name, $c, True, $indent_count + 4, $free_list)#slurp
${indent}} else {
            #set $indent_count += 4
            #set $indent = $indent_count * " "
        #end if
$cc.CommonCheetah.define_static_args($input_args, $indent_count)
${indent}/* Define the arguments sent. */
$cc.CommonCheetah.define_arguments($input_args, $indent_count, $free_list)#slurp
        #if $c.input_arg_info.has_array() 
${indent}int index0 = 0;
        #end if

$cc.CommonCheetah.initialize_args($input_args, $complete_name, $indent_count)#slurp
    #end if
    #if $is_get_set

$do_property_call($complete_name, $c, False, $indent_count, $free_list)#slurp
        }
    #else
        #if len($output_args) > 0
$do_property_call($complete_name, $c, True, $indent_count, $free_list)#slurp
        #else
$do_property_call($complete_name, $c, False, $indent_count, $free_list)#slurp
        #end if
    #end if
#end def
#####################
## Generate the code for a setting and getting a property.
#####################
#def $do_property_call($complete_name, $c, $do_get, $indent_count, $free_list)
    #set $indent = $indent_count * " "
    #if $do_get
${indent}AJ_AlwaysPrintf(("Calling '$complete_name'(Get).\n"));
${indent}ajcgStatus = ${c.name}_Get(bus, sessionId);

${indent}if (AJ_OK != ajcgStatus) {
${indent}    const char* statusText = AJ_StatusText(ajcgStatus);

${indent}    AJ_AlwaysPrintf(("Getting '$complete_name' property failed with status code 0x%x (%s).\n", ajcgStatus, statusText));
${indent}}
    #else
${indent}AJ_AlwaysPrintf(("Calling '$complete_name'(Set).\n"));
${indent}ajcgStatus = ${c.name}_Set(bus, sessionId#slurp
        #for $a in $c.input_arg_info.args
, $a.name#slurp
                #if $a.is_array()
, ${a.name}Elements#slurp
                #end if
        #end for
);
        #if len(free_list) > 0

            #for $f in $free_list
${indent}AJ_Free((void*)$f);
${indent}$f = NULL;
            #end for
        #end if

${indent}if (AJ_OK != ajcgStatus) {
${indent}    const char* statusText = AJ_StatusText(ajcgStatus);
${indent}    AJ_AlwaysPrintf(("Setting '$complete_name' property failed with status code 0x%x (%s).\n", ajcgStatus, statusText));
${indent}}
    #end if
#end def
