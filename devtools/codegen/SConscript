# Copyright (c) 2014 AllSeen Alliance. All rights reserved.
#
#    Contributed by Qualcomm Connected Experiences, Inc.,
#    with authorization from the AllSeen Alliance, Inc.
#    
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#    
#        http://www.apache.org/licenses/LICENSE-2.0
#    
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Pursuant to Section 1 of the License, the work of authorship constituting
#    a Work and any Contribution incorporated in the Work shall mean only that
#    Contributor's code submissions authored by that Contributor.  Any rights
#    granted under the License are conditioned upon acceptance of these
#    clarifications.

import os
import shutil
import platform

import SCons.Action
import SCons.Builder
import SCons.Util

from src import config

def _generate(environment):
    """Add Builders and construction variables to the Environment."""
    environment['CHEETAH'] = _detect(environment)
    environment['BUILDERS']['CHEETAH'] = _cheetah_builder

_cheetah_builder = Builder(
                           action = 'cheetah compile $SOURCES',
                           suffix = '.py',
                           src_suffix = '.tmpl')

class ToolCheetahWarning(SCons.Warnings.Warning):
    pass

class CheetahCompilerNotFound(ToolCheetahWarning):
    pass

SCons.Warnings.enableWarningClass(ToolCheetahWarning)

def _detect(environment):
    """ Try to detect the Cheetah compiler """

    try:
        return environment['CHEETAH']
    except KeyError:
        pass

    cheetah = environment.WhereIs('cheetah') or environment.WhereIs('cheetah.py')

    if cheetah:
        return cheetah

    raise SCons.Errors.StopError(
        CheetahCompilerNotFound,
        "Could not find Cheetah compiler.")
    return None

################
# Start of execution.
################
env = Environment(ENV = os.environ, BUILDERS={'Cheetah' : _cheetah_builder})

Export('env')

# The version is used in the name of the target installation program.
version = config.get_version()

if platform.system() == "Linux":
    build_option = "bdist_rpm"
    build_target = "AllJoynCodeGenSetup-{0}.noarch.rpm".format(version)
elif platform.system() == "Windows":
    path_ext = env['ENV']['PATHEXT']
    env['ENV']['PATHEXT'] = "{0};.PY".format(path_ext)
    build_option = "bdist_msi"
    build_target = "AllJoynCodeGenSetup-{0}.win32.msi".format(version)

setup_action = "python setup.py {0}".format(build_option)

_generate(env)

# Add/remove projects in subdirectories for the build here.
env.SConscript('src/SConscript')

clean_target = env.Command(build_target, ['setup.py', 'src'], setup_action)
Clean(clean_target, Glob("build\*"))

Return('env')
