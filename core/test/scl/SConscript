# Copyright AllSeen Alliance. All rights reserved.
#
#    Contributed by Qualcomm Connected Experiences, Inc.,
#    with authorization from the AllSeen Alliance, Inc.
#    
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#    
#        http://www.apache.org/licenses/LICENSE-2.0
#    
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Pursuant to Section 1 of the License, the work of authorship constituting
#    a Work and any Contribution incorporated in the Work shall mean only that
#    Contributor's code submissions authored by that Contributor.  Any rights
#    granted under the License are conditioned upon acceptance of these
#    clarifications.

import os

Import('env')

# Build test programs (that don't require common headers)
# env.Program('basic_service', 'basic_service.cc')
# env.Program('basic_client', 'basic_client.cc')

# Build test programs (which require common headers)
addnl_test_env = env.Clone()
addnl_test_env.Append(CPPPATH = [ addnl_test_env.Dir(env['AJ_CORE_SRC_DIR'] + '/common/inc'),
                                  addnl_test_env.Dir(env['AJ_CORE_SRC_DIR'] + '/alljoyn_core'),
                                  addnl_test_env.Dir(env['AJ_CORE_SRC_DIR'] + '/alljoyn_core/src'),
                                  addnl_test_env.Dir(env['AJ_CORE_SRC_DIR'] + '/alljoyn_core/router'),
                                  addnl_test_env.Dir(env['AJ_CORE_SRC_DIR'] + '/alljoyn_core/router/$OS_GROUP'),
                                  addnl_test_env.Dir('$AJ_CORE_DIST_DIR/cpp/inc/alljoyn') ])
# On newer versions of GCC, link dependencies need to be explicitly specified.
# See: https://fedoraproject.org/wiki/UnderstandingDSOLinkChange
if addnl_test_env['OS'] == 'linux':
    addnl_test_env.Append(LIBS = ['rt', 'pthread', 'crypto'])

addnl_test_env.Program('advtdiscov'        , 'advtdiscov.cc')
addnl_test_env.Program('ajoin'             , 'ajoin.cc')
addnl_test_env.Program('aping'             , 'aping.cc')
addnl_test_env.Program('FuzzedDaemon'      , 'FuzzedDaemon.cc')
addnl_test_env.Program('slsemitter'        , 'slsemitter.cc')
addnl_test_env.Program('slsreceiver'       , 'slsreceiver.cc')
addnl_test_env.Program('ajtrawclient'      , 'ajtrawclient.cc')
addnl_test_env.Program('ajtrawservice'     , 'ajtrawservice.cc')
addnl_test_env.Program('datatype_client'   , 'datatype_client.cc')
addnl_test_env.Program('datatype_service'  , 'datatype_service.cc')
addnl_test_env.Program('bbtest'            , 'bbtest.cc')
addnl_test_env.Program('sessions-test'     , 'sessions-test.cc')
addnl_test_env.Program('nameChange_client' , 'nameChange_client.cc')
addnl_test_env.Program('registerbusobjects', 'registerbusobjects.cc')
addnl_test_env.Program('signal_service'    , 'signal_service.cc')
addnl_test_env.Program('bbftp'             , 'bbftp.cc')
addnl_test_env.Program('ajsigtest'         , 'ajsigtest.cc')
addnl_test_env.Program('authtestservice'   , 'authtestservice.cc')
addnl_test_env.Program('authtestclient'    , 'authtestclient.cc')
addnl_test_env.Program('authtest'          , 'authtest.cc')
addnl_test_env.Program('AboutClient_test'  , 'AboutClient_test.cc')
addnl_test_env.Program('AboutService_test' , 'AboutService_test.cc')

if addnl_test_env['OS_CONF'] == 'linux':
    addnl_test_env.Program('mdns_fuzzer', '../misc/mdns_fuzzer.cc')

#if addnl_test_env['BR'] == 'on':
#    addnl_test_env.Program('ardpstress', 'ardpstress.cc')
#    addnl_test_env.Program('ardpfuzz', 'ardpfuzz.cc')

# policydb test programs
if addnl_test_env['BR'] == 'off':
    addnl_test_env.Program('policyService', 'policyService.cc')
    addnl_test_env.Program('policyClientAll', 'policyClientAll.cc')

# Build test programs (which require common headers and use googletests)
# If GTEST_DIR is specified, enable building any googletest-based Unittests
if env.has_key('GTEST_DIR'):
    # The following is copied as-is from alljoyn/common/unit_test/SConscript
    # This can be removed once the following JIRA is fixed:
    # https://jira.allseenalliance.org/browse/ASACORE-152
    gtest_env = addnl_test_env.Clone()
    gtest_dir = gtest_env['GTEST_DIR']
    vars = Variables();
    vars.AddVariables(('GTEST_HOME', '', gtest_dir))
    vars.Update(gtest_env)

    if gtest_dir == '/usr':
        gtest_src_base = os.path.join(gtest_dir, 'src', 'gtest')
    else:
        gtest_src_base = gtest_dir

    if gtest_env['OS_GROUP'] == 'windows':
        # gTest does not require the same CPPDEFINES as AllJoyn core.
        gtest_env.Append(CPPDEFINES = ['WIN32', '_LIB'])
        # don't use the _DEBUG define unless the /MDd compiler flag is specified
        #gtest_env.Append(CPPDEFINES = ['WIN32', '_DEBUG', '_LIB'])
        gtest_env.Append(CXXFLAGS = ['/EHsc'])

    if gtest_env['OS_CONF'] == 'android':
        # used by gtest to prevent use of wcscasecmp and set GTEST_HAS_STD_WSTRING=0
        gtest_env.Append(CPPDEFINES = ['ANDROID'])

    # tr1::tuple is not avalible for android or darwin
    if gtest_env['OS_CONF'] == 'android' or gtest_env['OS_CONF'] == 'darwin':
        gtest_env.Append(CPPDEFINES = ['GTEST_HAS_TR1_TUPLE=0'])

    # clone() library function is NOT available on android-x86
    if gtest_env['OS_CONF'] == 'android' and gtest_env['CPU'] == 'x86':
        gtest_env.Append(CPPDEFINES = ['GTEST_HAS_CLONE=0'])

    # Microsoft Visual Studio 2012 has a different _VARIADIC_MAX default value.
    # See: http://blogs.msdn.com/b/vcblog/archive/2011/09/12/10209291.aspx
    if gtest_env['OS_CONF'] == 'windows' and (gtest_env['MSVC_VERSION'] == '11.0' or gtest_env['MSVC_VERSION'] == '11.0Exp'):
        gtest_env.Append(CPPDEFINES = ['_VARIADIC_MAX=10'])

    # we compile with no rtti and we are not using exceptions.
    gtest_env.Append(CPPDEFINES = ['GTEST_HAS_RTTI=0'])
    gtest_env.Append(CPPPATH = [ gtest_src_base ])
    if gtest_dir != '/usr':
        gtest_env.Append(CPPPATH = [ gtest_env.Dir('$GTEST_DIR/include') ])

    gtest_obj = gtest_env.StaticObject(target = 'gtest-all', source = [ '%s/src/gtest-all.cc' % gtest_src_base ])
    gtest_env.StaticLibrary(target = 'gtest', source = gtest_obj)

    # Build test programs that use googletest framework
    addnl_unittest_env = gtest_env.Clone()
    # Let the program use any APIs from 'common' code
    addnl_unittest_env.Append(CPPPATH = [ addnl_unittest_env.Dir(env['AJ_CORE_SRC_DIR'] + '/common/inc'),
                                          addnl_unittest_env.Dir('$AJ_CORE_DIST_DIR/cpp/inc/alljoyn') ])
    gtest_dir = addnl_unittest_env['GTEST_DIR']
    if gtest_dir != '/usr':
        addnl_unittest_env.Append(CPPPATH = [gtest_dir + '/include'])

    if addnl_unittest_env['OS_GROUP'] == 'windows':
        addnl_unittest_env.Append(CXXFLAGS = ['/EHsc'])

    # we compile with no rtti and we are not using exceptions.
    addnl_unittest_env.Append(CPPDEFINES = ['GTEST_HAS_RTTI=0'])

    if addnl_unittest_env['OS_CONF'] == 'android':
        # used by gtest to prevent use of wcscasecmp and set GTEST_HAS_STD_WSTRING=0
        addnl_unittest_env.Append(CPPDEFINES = ['ANDROID'])

    if addnl_unittest_env['OS_CONF'] == 'android' or addnl_unittest_env['OS_CONF'] == 'darwin':
        addnl_unittest_env.Append(CPPDEFINES = ['GTEST_HAS_TR1_TUPLE=0'])
    if addnl_unittest_env['OS_CONF'] == 'android' and addnl_unittest_env['CPU'] == 'x86':
        addnl_unittest_env.Append(CPPDEFINES = ['GTEST_HAS_CLONE=0'])
    if addnl_unittest_env['OS_CONF'] == 'windows' and addnl_unittest_env['MSVC_VERSION'] == '11.0':
        addnl_unittest_env.Append(CPPDEFINES = ['_VARIADIC_MAX=10'])
    # path for alljoyn library file
    addnl_unittest_env.Append(LIBPATH = ['$DISTDIR/cpp/lib'])
    # gtest library file is placed in same folder as the the object files.
    addnl_unittest_env.Append(LIBPATH = ['./'])

    addnl_unittest_env.Prepend(LIBS = ['gtest'])

    # RoutingNode-to-RoutingNode tests involve the use of
    # two routing nodes. One that is bundled-in-process and
    # the other is 'alljoyn-daemon', if available.
    # Thus, these are valid only for Linux and Android
    if addnl_unittest_env['BR'] == 'on' and (addnl_unittest_env['OS'] == 'android' or addnl_unittest_env['OS'] == 'linux'):
        addnl_unittest_env.Program('ajr2rtest', 'ajR2RTest.cc')
        addnl_unittest_env.Program('namepropagationtest', 'NamePropagationTest.cc')
        addnl_unittest_env.Program('nameownerchangedtest', 'NameOwnerChangedTest.cc')

    if env.has_key('AJTC_CORE_DIR'):
        if addnl_unittest_env['OS'] == 'win7':
            addnl_unittest_env.Append(LIBS=['advapi32'])

        alljoyn_thin_standard_test_srcs = addnl_unittest_env.Glob("../tcl/tc-sc-interaction/*.cc")
        alljoyn_thin_standard_test_objs = [ addnl_unittest_env.Object(alljoyn_thin_standard_test_srcs) ]
        addnl_unittest_env.Program('ajtcsctest', alljoyn_thin_standard_test_objs)
