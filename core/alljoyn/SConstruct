# Copyright AllSeen Alliance. All rights reserved.
#
#    Contributed by Qualcomm Connected Experiences, Inc.,
#    with authorization from the AllSeen Alliance, Inc.
#    
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#    
#        http://www.apache.org/licenses/LICENSE-2.0
#    
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Pursuant to Section 1 of the License, the work of authorship constituting
#    a Work and any Contribution incorporated in the Work shall mean only that
#    Contributor's code submissions authored by that Contributor.  Any rights
#    granted under the License are conditioned upon acceptance of these
#    clarifications.
# 

import os

# Get the global environment
env = SConscript(['build_core/SConscript'])

vars = Variables()

vars.Add('BINDINGS', 'Bindings to build (comma separated list): cpp, c, java, js', 'cpp,c,java,js')
vars.Add('SERVICES', 'AllJoyn services libraries to build (comma separated list): config,controlpanel,notification,onboarding,time,audio', '')
vars.Add(EnumVariable('BUILD_SERVICES_SAMPLES', 'Build the services samples that require libxml2 and json libraries.', 'on', allowed_values = ['on', 'off']))
vars.Update(env)
Help(vars.GenerateHelpText(env))

bindings = set([ b.strip()
                 for b in env['BINDINGS'].split(',')
                 if b.strip() == 'cpp' or os.path.exists('alljoyn_%s/SConscript' % b.strip()) ])
services = set([ s.strip()
                 for s in env['SERVICES'].split(',')
                 if os.path.exists('../../services/base/%s/SConscript' % s.strip())])

print 'Building bindings: %s' % ', '.join(bindings)
print 'Building services: %s' % ', '.join(services)

env['bindings'] = bindings
env['services'] = services

# Always build AllJoyn Core
env.SConscript(['alljoyn_core/SConscript'])

if 'c' in bindings:
    env.SConscript(['alljoyn_c/SConscript'])

if 'java' in bindings:
    env.SConscript(['alljoyn_java/SConscript'])

if 'js' in bindings:
    env.SConscript(['alljoyn_js/SConscript'])

# Always build AboutService and ConfigService.
env.SConscript(['services/about/SConscript'])
env.SConscript(['services/config/SConscript'])

if services.intersection(['controlpanel', 'notification', 'onboarding', 'time', 'audio']):
    env['APP_COMMON_DIR'] = env.Dir('../../services/base/sample_apps')

    if services.intersection(['controlpanel', 'notification']):
        # controlpanel also depends on notification
        env.SConscript(['../../services/base/notification/SConscript'])

        if 'controlpanel' in services:
            env.SConscript(['../../services/base/controlpanel/SConscript'])

    if 'onboarding' in services:
        env.SConscript(['../../services/base/onboarding/SConscript'])

    if 'time' in services:
        env.SConscript(['../../services/base/time/SConscript'])

    if 'audio' in services:
        env.SConscript(['../../services/audio/SConscript'])

    if env['BUILD_SERVICES_SAMPLES'] == 'on':
        env.SConscript(['../../services/base/sample_apps/SConscript'])

#Build Win7 SDK installer
if env.has_key('WIN7_MSI') and env['WIN7_MSI'] == 'true':
    win7Sdk = env.SConscript(['alljoyn_core/install/Win7/SConscript'])
    env.Depends(win7Sdk, installedFiles)

# Build Alias to make cleaning, building and rebuilding the documentation when
# working only on the documentation simpler. This can be run by using
# `scons all_docs`
env.Alias('all_docs', ['core_docs', 'c_docs'])
