# Copyright AllSeen Alliance. All rights reserved.
#
#    Contributed by Qualcomm Connected Experiences, Inc.,
#    with authorization from the AllSeen Alliance, Inc.
#    
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#    
#        http://www.apache.org/licenses/LICENSE-2.0
#    
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Pursuant to Section 1 of the License, the work of authorship constituting
#    a Work and any Contribution incorporated in the Work shall mean only that
#    Contributor's code submissions authored by that Contributor.  Any rights
#    granted under the License are conditioned upon acceptance of these
#    clarifications.
# 

import os
Import('env')
from os.path import basename

# Bullseye code coverage for 'debug' builds.
if env['VARIANT'] == 'debug':
    if not env.has_key('BULLSEYE_BIN'):
        print 'BULLSEYE_BIN not specified'
    else:
        env.PrependENVPath('PATH', env.get('BULLSEYE_BIN'))
        if not os.environ.has_key('COVFILE'):
            print 'Error: COVFILE environment variable must be set'
            if not GetOption('help'):
                Exit(1)
        else:
            env.PrependENVPath('COVFILE', os.environ['COVFILE'])

# Make alljoyn C++ dist a sub-directory of the alljoyn dist.
env['OBJDIR_COMMON'] = env['OBJDIR'] + '/common'

# All AllJoyn subprojects have access to common so add the include path to the global environment
env.Append(CPPPATH = [env.Dir('inc')])

if 'MOSQUITTO_SRC' in ARGUMENTS:
    vars = Variables()
    vars.Add(PathVariable('MOSQUITTO_SRC', 'Base Mosquitto directory', os.environ.get('MOSQUITTO_SRC')))
    vars.Update(env)
    env.Append(CPPPATH = ['$MOSQUITTO_SRC'])
    env.Append(LIBPATH = ['$MOSQUITTO_SRC'])
    env.AppendUnique(LIBS =['mosquitto','mosquittopp'])

commonenv = env.Clone()

# Variant settings
commonenv.VariantDir('$OBJDIR_COMMON', 'src', duplicate = 0)
commonenv.VariantDir('$OBJDIR_COMMON/os', 'os/${OS_GROUP}', duplicate = 0)
commonenv.VariantDir('$OBJDIR_COMMON/crypto', 'crypto/${CRYPTO}', duplicate = 0)

commonenv.Append(CPPPATH = ['crypto'])

# Setup dependent include directories
hdrs = { 'qcc': commonenv.File(['inc/qcc/Log.h',
                                'inc/qcc/Debug.h',
                                'inc/qcc/ManagedObj.h',
                                'inc/qcc/Mutex.h',
                                'inc/qcc/String.h',
                                'inc/qcc/StringUtil.h',
                                'inc/qcc/atomic.h',
                                'inc/qcc/CryptoECC.h',
                                'inc/qcc/CertificateECC.h',
                                'inc/qcc/platform.h']),
         'qcc/${OS_GROUP}': commonenv.File(['inc/qcc/${OS_GROUP}/atomic.h',
                                            'inc/qcc/${OS_GROUP}/platform_types.h',
                                            'inc/qcc/${OS_GROUP}/Mutex.h']) }

if commonenv['OS_GROUP'] == 'windows':
    hdrs['qcc/${OS_GROUP}'] += commonenv.File(['inc/qcc/${OS_GROUP}/mapping.h'])


# under normal build conditions the Status.xml found in alljoyn_core is used to
# build Status.h and Status.cc.  If we are building the code in common independent
# of the alljoyn_core we will have to create Status.h and Status.cc for common.
status_obj = [];
if commonenv.has_key('BUILD_COMMON_STATUS'):
    status_src, status_hdr = commonenv.Status('$OBJDIR_COMMON/Status')
    status_obj = commonenv.Object(status_src)
    commonenv.Append(CPPPATH = ['#' + os.path.dirname(str(status_hdr))])
else:
    # allow common to "#include <Status.h>" when building all of AllJoyn
    commonenv.Append(CPPPATH = ['$DISTDIR/cpp/inc/alljoyn'])

if commonenv['CRYPTO'] == 'builtin':
    commonenv.Append(CPPPATH = [env.Dir('../external/sha2'), env.Dir('../external/sha1')])

# Build the sources
status_src = ['Status.cc']


srcs = commonenv.Glob('$OBJDIR_COMMON/*.cc') + commonenv.Glob('$OBJDIR_COMMON/os/*.cc') + commonenv.Glob('$OBJDIR_COMMON/crypto/*.cc') + commonenv.Glob('$OBJDIR_COMMON/crypto/ECC/*.cc')

# Make sure Status never gets included from common for contained projects
srcs = [ f for f in srcs if basename(str(f)) not in status_src ]

static_objs = commonenv.Object(srcs)

if commonenv['LIBTYPE'] != 'static':
    shared_objs = commonenv.SharedObject(srcs)
else:
    shared_objs = []


libcommon = commonenv.StaticLibrary('$OBJDIR_COMMON/common_static', [static_objs, status_obj])

# Build unit Tests
commonenv.SConscript('unit_test/SConscript', variant_dir='$OBJDIR_COMMON/unittest', duplicate=0, exports=['commonenv', 'libcommon'])

ret = (hdrs, static_objs, shared_objs)

Return('ret')
