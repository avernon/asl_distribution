# Copyright AllSeen Alliance. All rights reserved.
#
#    Contributed by Qualcomm Connected Experiences, Inc.,
#    with authorization from the AllSeen Alliance, Inc.
#    
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#    
#        http://www.apache.org/licenses/LICENSE-2.0
#    
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Pursuant to Section 1 of the License, the work of authorship constituting
#    a Work and any Contribution incorporated in the Work shall mean only that
#    Contributor's code submissions authored by that Contributor.  Any rights
#    granted under the License are conditioned upon acceptance of these
#    clarifications.
# 

Import('ajenv')
Import('common_static_objs')
Import('common_shared_objs')
from os.path import basename

# Need to clone the environment so that building a shared library does not
# cause a circular dependency.
libenv = ajenv.Clone()

# AllJoyn Sources
srcs = [ f for f in libenv.Glob('*.cc') + libenv.Glob('*.c')
         if not (str(f).endswith('version.cc')) ]

# Platform specific sources
if libenv['OS'] == 'darwin':
    os_srcs = [ f for f in libenv.Glob(libenv['OS'] + '/*.cc') ]
else:
    os_srcs = [ f for f in libenv.Glob(libenv['OS_GROUP'] + '/*.cc') ]

    if libenv['OS'] == 'openwrt':
        os_srcs += [ f for f in libenv.Glob('posix/linux/*.cc')]
    else:
        os_srcs += [ f for f in libenv.Glob(libenv['OS_GROUP'] + '/' + libenv['OS'] + '/*.cc')]

version_cc = libenv.GenVersion('version')

static_objs = common_static_objs + libenv.Object(srcs) + libenv.Object(os_srcs)
libenv.Depends(version_cc, static_objs)
static_objs.append(libenv.Object(version_cc))

if libenv['LIBTYPE'] == 'static':
    shared_objs = []
else:
    shared_objs = common_shared_objs + libenv.SharedObject(srcs) + libenv.SharedObject(os_srcs)
    libenv.Depends(version_cc, shared_objs)
    shared_objs.append(libenv.SharedObject(version_cc))

# AllJoyn Static Library
libs = libenv.StaticLibrary('alljoyn', static_objs)
if libenv['LIBTYPE'] != 'static':
    libs.append(libenv.SharedLibrary('alljoyn', shared_objs))

Return ('libs', 'static_objs', 'shared_objs')
