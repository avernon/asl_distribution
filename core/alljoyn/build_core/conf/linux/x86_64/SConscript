# Copyright AllSeen Alliance. All rights reserved.
#
#    Contributed by Qualcomm Connected Experiences, Inc.,
#    with authorization from the AllSeen Alliance, Inc.
#    
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#    
#        http://www.apache.org/licenses/LICENSE-2.0
#    
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Pursuant to Section 1 of the License, the work of authorship constituting
#    a Work and any Contribution incorporated in the Work shall mean only that
#    Contributor's code submissions authored by that Contributor.  Any rights
#    granted under the License are conditioned upon acceptance of these
#    clarifications.
# 

Import('env')

vars = Variables()
vars.Add(BoolVariable('TSAN', 'Enable Thread Sanitizer runtime checks', 'no'))
vars.Update(env)

# Linux specific flags

# Force 64-bit builds
env.Append(CXXFLAGS=['-m64', '-fPIC'])
env.Append(CFLAGS=['-m64', '-fPIC'])
env.Append(LINKFLAGS=['-m64'])

# Thread sanitizer control
if env['TSAN']:
   env.Append(CFLAGS = ['-fno-omit-frame-pointer', '-fsanitize=thread', '-fPIE'])
   env.Append(CXXFLAGS = ['-fno-omit-frame-pointer', '-fsanitize=thread', '-fPIE'])
   env.Append(LINKFLAGS = ['-fsanitize=thread', '-pie'])
   if env['CXX'] != 'clang':
      env.AppendUnique(LIBS = ['tsan'])
