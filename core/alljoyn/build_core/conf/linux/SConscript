# Copyright AllSeen Alliance. All rights reserved.
#
#    Contributed by Qualcomm Connected Experiences, Inc.,
#    with authorization from the AllSeen Alliance, Inc.
#    
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#    
#        http://www.apache.org/licenses/LICENSE-2.0
#    
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Pursuant to Section 1 of the License, the work of authorship constituting
#    a Work and any Contribution incorporated in the Work shall mean only that
#    Contributor's code submissions authored by that Contributor.  Any rights
#    granted under the License are conditioned upon acceptance of these
#    clarifications.
# 

Import('env', 'CheckCXXFlag')
import os

# Linux specific vars
vars = Variables()
vars.Add(BoolVariable('GCOV', 'Compile with gcov support', 'no'))
vars.Add(BoolVariable('ASAN', 'Enable Address Sanitizer runtime checks', 'no'))
vars.Update(env)

Help(vars.GenerateHelpText(env))

config = Configure(env, custom_tests = { 'CheckCXXFlag' : CheckCXXFlag })
if not config.CheckCXXFlag('-std=c++11'):
   if not config.CheckCXXFlag('-std=c++0x'):
      print '*** Compiler too old to build AllJoyn.  Aborting.'
      Exit(1)
env = config.Finish()

# Linux specific flags
env.Append(CPPDEFINES = ['QCC_OS_LINUX'])
env.Append(CPPDEFINES = ['_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC'])

env.Append(CFLAGS = ['-Wall',
                     '-Werror',
                     '-pipe',
                     '-std=c99',
                     '-fno-strict-aliasing',
                     '-fno-asynchronous-unwind-tables',
                     '-fno-unwind-tables',
                     '-ffunction-sections',
                     '-fdata-sections',
                     '-Wno-long-long',
                     '-Wunused-parameter'])

env.Append(CXXFLAGS = ['-Wall',
                       '-Werror',
                       '-pipe',
                       '-fno-exceptions',
                       '-fno-strict-aliasing',
                       '-fno-asynchronous-unwind-tables',
                       '-fno-unwind-tables',
                       '-ffunction-sections',
                       '-fdata-sections',
                       '-Wno-long-long',
                       '-Wno-deprecated',
                       '-Wno-unknown-pragmas',
                       '-Wunused-parameter'])

env.Append(JAVACFLAGS = ['-Xlint', '-Xlint:-serial'])

# Debug/Release Variants
if env['VARIANT'] == 'debug':
   env.Append(CFLAGS = '-g')
   env.Append(CXXFLAGS = '-g')
   env.Append(JAVACFLAGS = '-g')
   env.Append(CPPDEFINES = ['_GLIBCXX_DEBUG', '_GLIBCXX_DEBUG_PEDANTIC'])
else:
   env.Append(CFLAGS = '-Os')
   env.Append(CXXFLAGS = '-Os')
   env.Append(LINKFLAGS = ['-s', '-Wl,--gc-sections'])

# Code coverage control
if env['GCOV']:
    env.Append(CCFLAGS = ['-fprofile-arcs', '-ftest-coverage'])
    env.Append(LIBS = ['gcov'])

# Address sanitizer control
if env['ASAN']:
   env.Append(CFLAGS = ['-fno-omit-frame-pointer', '-fsanitize=address'])
   env.Append(CXXFLAGS = ['-fno-omit-frame-pointer', '-fsanitize=address'])
   env.Append(LINKFLAGS = '-fsanitize=address')

env.SConscript('${CPU}/SConscript')

env.AppendUnique(LIBS =['rt', 'stdc++', 'pthread', 'm'])
if env['CRYPTO'] == 'openssl':
    env.AppendUnique(LIBS =['crypto', 'ssl','mosquittopp'])
    print 'Using OpenSSL crypto'
else:
    print 'Using builtin crypto'
