# Copyright AllSeen Alliance. All rights reserved.
#
#    Contributed by Qualcomm Connected Experiences, Inc.,
#    with authorization from the AllSeen Alliance, Inc.
#    
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#    
#        http://www.apache.org/licenses/LICENSE-2.0
#    
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Pursuant to Section 1 of the License, the work of authorship constituting
#    a Work and any Contribution incorporated in the Work shall mean only that
#    Contributor's code submissions authored by that Contributor.  Any rights
#    granted under the License are conditioned upon acceptance of these
#    clarifications.
# 

Import('env', 'CheckCXXFlag')
import os

# Darwin specific flags
env.Append(CPPDEFINES=['QCC_OS_DARWIN'])

config = Configure(env, custom_tests = { 'CheckCXXFlag' : CheckCXXFlag })
if not config.CheckCXXFlag('-std=c++11'):
   if not config.CheckCXXFlag('-std=c++0x'):
      print '*** Compiler too old to build AllJoyn.  Aborting.'
      Exit(1)
env = config.Finish()

env.Append(CFLAGS=['-Wall',
                   '-pipe',
                   '-std=c99',
                   '-fno-strict-aliasing',
                   '-Wno-long-long'])

env.Append(CXXFLAGS=['-Wall',
                     '-Werror=non-virtual-dtor',
                     '-pipe',
                     '-fno-exceptions',
                     '-fno-strict-aliasing',
                     '-Wno-deprecated'])

# Debug/Release Variants
if env['VARIANT'] == 'debug':
   env.Append(CFLAGS='-g')
   env.Append(CXXFLAGS='-g')
   env.Append(JAVACFLAGS='-g -Xlint -Xlint:-serial')
   print 'Using debug settings for darwin build...'
else:
   env.Append(CFLAGS='-O3')
   env.Append(CXXFLAGS='-O3')
   env.Append(LINKFLAGS='')
   env.Append(JAVACFLAGS='-Xlint -Xlint:-serial')
   print 'Using release settings for darwin build...'

env.SConscript('${CPU}/SConscript')

env.Append(CPPDEFINES=['MECHANISM_PIPE'])
env.AppendUnique(LIBS =['stdc++', 'pthread'])
if env['CRYPTO'] == 'openssl':
    env.AppendUnique(LIBS =['crypto', 'ssl'])
    if env['CPU'] in ['arm', 'armv7', 'armv7s', 'arm64']:
        vars = Variables()
        vars.Add(PathVariable('OPENSSL_ROOT', 'Base OpenSSL directory (darwin only)', os.environ.get('OPENSSL_ROOT')))
        vars.Update(env)
        Help(vars.GenerateHelpText(env))
        if '' == env.subst('$OPENSSL_ROOT'):
            # Must specify OPENSSL_ROOT for darwin, arm
            print 'Must specify OPENSSL_ROOT when building for OS=darwin, CPU=arm'
            if not GetOption('help'):
                Exit(1)
        env.Append(CPPPATH = ['$OPENSSL_ROOT/include'])
        env.Append(LIBPATH = ['$OPENSSL_ROOT/build/' + os.environ.get('CONFIGURATION') + '-' + os.environ.get('PLATFORM_NAME')])
    print 'Using OpenSSL crypto'
else:
    print 'Using builtin crypto'
