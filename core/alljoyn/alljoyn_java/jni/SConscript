# Copyright (c) 2010 - 2015, AllSeen Alliance. All rights reserved.
#
#    Contributed by Qualcomm Connected Experiences, Inc.,
#    with authorization from the AllSeen Alliance, Inc.
#    
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#    
#        http://www.apache.org/licenses/LICENSE-2.0
#    
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Pursuant to Section 1 of the License, the work of authorship constituting
#    a Work and any Contribution incorporated in the Work shall mean only that
#    Contributor's code submissions authored by that Contributor.  Any rights
#    granted under the License are conditioned upon acceptance of these
#    clarifications.
# 

Import('env')

# JNI library sources
srcs = ['alljoyn_java.cc']

# JNI library
bdenv = env.Clone()

if bdenv['LIBTYPE'] == 'both':
    # Need to replace the shared alljoyn library with the static one for linking the plugin.
    libs = bdenv['LIBS']
    libs[libs.index('alljoyn')] = bdenv.File('$DISTDIR/cpp/lib/${LIBPREFIX}alljoyn${LIBSUFFIX}')
    bdenv.Replace(LIBS = libs)

# The JNI code must link in the bundled daemon even if BR is set to 'off'
if bdenv['BR'] == 'on':
    bdenv.Prepend(LIBS = [env['ajrlib']])

objs = bdenv.SharedObject(srcs)

liballjoyn_java = bdenv.SharedLibrary('alljoyn_java', objs)

Return('liballjoyn_java')
