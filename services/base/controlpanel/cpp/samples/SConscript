# Copyright AllSeen Alliance. All rights reserved.
#
#    Contributed by Qualcomm Connected Experiences, Inc.,
#    with authorization from the AllSeen Alliance, Inc.
#    
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#    
#        http://www.apache.org/licenses/LICENSE-2.0
#    
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Pursuant to Section 1 of the License, the work of authorship constituting
#    a Work and any Contribution incorporated in the Work shall mean only that
#    Contributor's code submissions authored by that Contributor.  Any rights
#    granted under the License are conditioned upon acceptance of these
#    clarifications.

Import('cpsenv')

samples_env = cpsenv.Clone()

samples_env.Append(CPPPATH = samples_env.Dir('generated').srcnode())
samples_env.Append(CPPPATH = samples_env.Dir('provided').srcnode())
samples_env.Append(CPPPATH = samples_env.Dir('$APP_COMMON_DIR/cpp/samples_common').srcnode())

#samples_env.Append(CPPDEFINES = 'USE_SAMPLE_LOGGER')

samples_env.Prepend(LIBS = ['alljoyn_controlpanel', 'alljoyn_about', 'alljoyn_services_common'])

if samples_env['BR'] == 'on' and samples_env.has_key('ajrlib'):
    # Build apps with bundled daemon support
    samples_env.Prepend(LIBS = [samples_env['ajrlib']])

samples_env.VariantDir('AppCommon', '$APP_COMMON_DIR/cpp/samples_common/', duplicate = 0)
cobjs = samples_env.SConscript('AppCommon/SConscript', {'env': samples_env})

genobjs = samples_env.SConscript('generated/SConscript', {'env': samples_env})
providedobjs = samples_env.SConscript('provided/SConscript', {'env': samples_env})

############ Samples without Notification ############

# Sample programs
sample_dirs = [
    'ControlPanelSample'
    ]

exports = { 'env': samples_env, 'cobjs': cobjs, 'genobjs' : genobjs, 'providedobjs' : providedobjs }

progs = [ samples_env.SConscript('%s/SConscript' % sampleapp, exports = exports) for sampleapp in sample_dirs ]

############ Samples with Notification ############

samples_env2 = samples_env.Clone()

sample_dirs_with_notification = [
    'ControlPanelProducer',
    'ControlPanelController'
    ]

samples_env2.Prepend(LIBS = ['alljoyn_notification'])

exports = { 'env': samples_env2, 'cobjs': cobjs, 'genobjs' : genobjs, 'providedobjs' : providedobjs }

progs.append([ samples_env2.SConscript('%s/SConscript' % sampleapp, exports = exports) for sampleapp in sample_dirs_with_notification ])

Return('progs')
