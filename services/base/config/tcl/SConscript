# Copyright (c) 2013 - 2014, AllSeen Alliance. All rights reserved.
#
#    Contributed by Qualcomm Connected Experiences, Inc.,
#    with authorization from the AllSeen Alliance, Inc.
#    
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#    
#        http://www.apache.org/licenses/LICENSE-2.0
#    
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Pursuant to Section 1 of the License, the work of authorship constituting
#    a Work and any Contribution incorporated in the Work shall mean only that
#    Contributor's code submissions authored by that Contributor.  Any rights
#    granted under the License are conditioned upon acceptance of these
#    clarifications.


import os

Import('samp_env')

objs = []
srcs = []
objs.extend(samp_env['aj_obj'])
objs.extend(samp_env.SConscript('#../../services_common/tcl/SConscript', variant_dir = 'services_common', duplicate = 1, exports = {'services_common_env': samp_env}))

if samp_env['variant_dirs'] == "ConfigSample":
    objs.extend(samp_env.SConscript('AppsCommon/SConscript', duplicate = 1, exports = {'appsCommon_env': samp_env}))
    srcs.extend(['ConfigSample.c'])
    objs.extend(samp_env.SConscript('#../../config/tcl/SConscript', {'config_env': samp_env}))

if samp_env['variant_dirs'] == "NotificationProducerSample":
    objs.extend(samp_env.SConscript('AppsCommon/SConscript', duplicate = 1, exports = {'appsCommon_env': samp_env}))
    srcs.extend(['NotificationProducerSample.c'])
    objs.extend(samp_env.SConscript('#../../notification/tcl/src/NotificationCommon/SConscript', variant_dir = 'NotificationCommon', duplicate = 1, exports = {'notif_env': samp_env}))
    objs.extend(samp_env.SConscript('#../../notification/tcl/src/NotificationProducer/SConscript', variant_dir = 'NotificationProducer', duplicate = 1, exports = {'notif_env': samp_env}))

if samp_env['variant_dirs'] == "NotificationConsumerSample":
    srcs.extend(['NotificationConsumerSample.c'])
    objs.extend(samp_env.SConscript('#../../notification/tcl/src/NotificationCommon/SConscript', variant_dir = 'NotificationCommon', duplicate = 1, exports = {'notif_env': samp_env}))
    objs.extend(samp_env.SConscript('#../../notification/tcl/src/NotificationConsumer/SConscript', variant_dir = 'NotificationConsumer', duplicate = 1, exports = {'notif_env': samp_env}))

if samp_env['variant_dirs'] == "ControlleeSample":
    objs.extend(samp_env.SConscript('AppsCommon/SConscript', duplicate = 1, exports = {'appsCommon_env': samp_env}))
    srcs.extend(['ControlleeSample.c'])
    objs.extend(samp_env.SConscript('#../../controlpanel/tcl/SConscript', variant_dir = 'controlpanel', duplicate = 1, exports = {'cps_env': samp_env}))
    srcs.extend(['ControlPanelGenerated.c', 'ControlPanelProvided.c'])

objs.extend(samp_env.Object(srcs))
prog = samp_env.Program(
    target = '#build/' + samp_env['variant_dirs'],
    source = [objs]
 )
