# Copyright (c) 2013 - 2014, AllSeen Alliance. All rights reserved.
#
#    Contributed by Qualcomm Connected Experiences, Inc.,
#    with authorization from the AllSeen Alliance, Inc.
#    
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#    
#        http://www.apache.org/licenses/LICENSE-2.0
#    
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Pursuant to Section 1 of the License, the work of authorship constituting
#    a Work and any Contribution incorporated in the Work shall mean only that
#    Contributor's code submissions authored by that Contributor.  Any rights
#    granted under the License are conditioned upon acceptance of these
#    clarifications.

import os.path
ajtcl_root_default = '../../../core/ajtcl'
ajtcl_root = ARGUMENTS.get('AJ_TCL_ROOT', ajtcl_root_default)
if not os.path.isfile(ajtcl_root + '/SConscript'):
    print "SConscript in 'AJ_TCL_ROOT=" + ajtcl_root + "' not found; aborting.\n"
    exit(1)

env = SConscript(ajtcl_root + '/SConscript')
if env['VARIANT'] == 'debug':
    env.Append(CPPDEFINES = ['ER_DEBUG_AJSVCAPP=1'])
    env.Append(CPPDEFINES = ['ER_DEBUG_AJSVCALL=1'])
    env.Append(CPPDEFINES = ['AJ_DEBUG_RESTRICT=AJ_DEBUG_INFO'])

env.Append(CPPPATH = [Dir('AppsCommon/inc')])
env.Append(CPPPATH = [Dir('AppsCommon/target/' + env['TARG'])])
env.Append(CPPPATH = [Dir('../../config/tcl/inc')])
env.Append(CPPPATH = [Dir('../../notification/tcl/inc')])
env.Append(CPPPATH = [Dir('../../controlpanel/tcl/inc')])
env.Append(CPPPATH = [Dir('.')])

samples = ['ConfigSample', 'NotificationProducerSample', 'NotificationConsumerSample', 'ControlleeSample']

for sample in samples:
    print ''
    print '                     handling sample:' + sample
    print '=================================================================='
    env['variant_dirs'] = sample
    samp_env = env.Clone()
    env.SConscript('SConscript', variant_dir = 'obj/' + samp_env['variant_dirs'], duplicate = 1, exports = 'samp_env')
