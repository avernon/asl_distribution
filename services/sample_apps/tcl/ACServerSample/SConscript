# Copyright (c) 2013 - 2014, AllSeen Alliance. All rights reserved.
#
#    Contributed by Qualcomm Connected Experiences, Inc.,
#    with authorization from the AllSeen Alliance, Inc.
#    
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#    
#        http://www.apache.org/licenses/LICENSE-2.0
#    
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Pursuant to Section 1 of the License, the work of authorship constituting
#    a Work and any Contribution incorporated in the Work shall mean only that
#    Contributor's code submissions authored by that Contributor.  Any rights
#    granted under the License are conditioned upon acceptance of these
#    clarifications.

# sample usage:
# scons ALL=1 TARG=linux WS=off VARIANT=debug 
# scons PRODUCER=1 CONSUMER=1 CONFIG=1 CPS=1 TARG=linux WS=off VARIANT=debug 
# defaults:
# ALL=0
# CONFIG=1
# PRODUCER=0
# CONSUMER=0
# CPS=0

import os

Import('env')

vars = Variables()

sersamp_env = env.Clone()

Export('sersamp_env')

if sersamp_env['VARIANT'] == 'debug':
    sersamp_env.Append(CPPDEFINES = ['ER_DEBUG_AJSVCAPP=1'])
    sersamp_env.Append(CPPDEFINES = ['ER_DEBUG_AJSVCALL=1'])
    sersamp_env.Append(CPPDEFINES = ['AJ_DEBUG_RESTRICT=AJ_DEBUG_INFO'])

sersamp_env.Append(CPPPATH = [Dir('../')])
sersamp_env.Append(CPPPATH = [Dir('../../AppsCommon/inc')])
sersamp_env.Append(CPPPATH = [Dir('../../AppsCommon/target/' + sersamp_env['TARG'])])
sersamp_env.Append(CPPPATH = [Dir('../../../../notification/tcl/inc')])

main_exe = 'ACServerSample'

srcs = ['ACServerSample.c']

common_samples_srcs = ['AppHandlers.c']

objs = []

common_samples_srcs.extend(['ConfigSample.c'])
objs.extend(sersamp_env.SConscript('../../../../config/tcl/SConscript', {'config_env': sersamp_env}))

srcs.extend(['ACNotificationProducerSample.c'])
objs.extend(SConscript('../../../../notification/tcl/src/NotificationProducer/SConscript', exports = {'notif_env': sersamp_env}))
objs.extend(SConscript('../../../../notification/tcl/src/NotificationCommon/SConscript', exports = {'notif_env': sersamp_env}))

srcs.extend(['ControlPanelGenerated.c', 'ControlPanelProvided.c', 'ControlPanelSample.c'])
objs.extend(SConscript('../../../../controlpanel/tcl/SConscript', {'cps_env': sersamp_env}))

objs.extend(sersamp_env.Object(srcs))

sersamp_env['common_samples_srcs'] = common_samples_srcs
objs.extend(sersamp_env.SConscript('../../AppsCommon/SConscript', variant_dir = 'AppsCommon', duplicate = 1, exports = {'appsCommon_env': sersamp_env}))

objs.extend(sersamp_env.SConscript('../../../../services_common/tcl/SConscript', variant_dir = 'services_common', duplicate = 1, exports = {'services_common_env': sersamp_env}))

prog = sersamp_env.Program(
    target = main_exe,
    source = [
              objs,
              sersamp_env['aj_obj'],
    ]
 )
sersamp_env.Install('../build', prog)
