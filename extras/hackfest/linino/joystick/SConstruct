# Contributed by Qualcomm Connected Experiences, Inc.,
# with authorization from the AllSeen Alliance, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# Pursuant to Section 1 of the License, the work of authorship constituting
# a Work and any Contribution incorporated in the Work shall mean only that
# Contributor's code submissions authored by that Contributor.  Any rights
# granted under the License are conditioned upon acceptance of these
# clarifications.
import os

env = Environment()

if os.environ.has_key('TARGET_CC_NOCACHE'):
    env.Replace(CC = os.environ['TARGET_CC_NOCACHE'])
if os.environ.has_key('TARGET_CXX_NOCACHE'):
    env.Replace(CXX = os.environ['TARGET_CXX_NOCACHE'])
if os.environ.has_key('TARGET_LINK'):
    env.Replace(LINK = os.environ['TARGET_LINK'])
if os.environ.has_key('STAGING_DIR'):
    env['ENV']['STAGING_DIR'] = os.environ.get('STAGING_DIR', '')
if os.environ.has_key('TARGET_PATH'):
    env['ENV']['PATH'] = ':'.join([ os.environ['TARGET_PATH'], env['ENV']['PATH'] ] )
if os.environ.has_key('TARGET_CFLAGS'):
    env.Append(CFLAGS=os.environ['TARGET_CFLAGS'].split())
    env.Append(CXXFLAGS=os.environ['TARGET_CFLAGS'].split())
if os.environ.has_key('EXTRA_CFLAGS'):
    env.Append(CFLAGS=os.environ['EXTRA_CFLAGS'].split())
    env.Append(CXXFLAGS=os.environ['EXTRA_CFLAGS'].split())
if os.environ.has_key('TARGET_CPPFLAGS'):
    env.Append(CFLAGS=os.environ['TARGET_CPPFLAGS'].split())
if os.environ.has_key('TARGET_LINKFLAGS'):
    env.Append(LINKFLAGS=os.environ['TARGET_LINKFLAGS'].split())
if os.environ.has_key('TARGET_LDFLAGS'):
    env.Append(LDFLAGS=os.environ['TARGET_LDFLAGS'].split())

env.Append(CFLAGS=['-Os',
                   '-Wall',
                   '-pipe',
                   '-funsigned-char',
                   '-Wpointer-sign',
                   '-Wimplicit-function-declaration',
                   '-fno-strict-aliasing'])
env.Append(CXXFLAGS=['-Os',
                     '-Wall',
                     '-pipe',
                     '-funsigned-char',
                     '-fno-strict-aliasing'])
env.Append(LINKFLAGS='-s')
env.Append(CPPPATH=env.Dir('./inc'));
if os.environ.has_key('STAGING_DIR'):
    env.Append(LIBS = ['smsg'])

if not os.environ.has_key('STAGING_DIR'):
    env.Append(CPPDEFINES='HOST_BUILD')

srcs = env.Glob('src/*.cc')

env.SharedLibrary('joystick', srcs)

Export('env')
env.SConscript('test/SConscript')
